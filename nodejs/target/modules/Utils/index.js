'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _os = _interopRequireDefault(require("os"));

var _jsonfile = _interopRequireDefault(require("jsonfile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Utils {
  static async getConfiguration(key) {
    const configFilename = `${this.rootDir}/config/${key}.json`;
    let json = {};

    if (_fs.default.existsSync(configFilename)) {
      json = _jsonfile.default.readFileSync(configFilename);
    } else {
      throw new Error(`配置文件 ${configFilename} 不存在`);
    }

    return json;
  }

  static async call(desc, asyncFunc, args = []) {
    const beginTime = new Date().getTime();
    const beginDateTime = (0, _moment.default)(beginTime).format('YYYY-MM-DD HH:mm:ss');
    const startLog = `start ${desc} ...`;
    console.log(`[${beginDateTime}]`, startLog);
    const ret = await asyncFunc(...args);
    const endTime = new Date().getTime();
    const endDateTime = (0, _moment.default)(endTime).format('YYYY-MM-DD HH:mm:ss');
    const costTime = endTime - beginTime;
    const finishLog = `final ${desc} => cost ${costTime / 1000} s`;
    console.log(`[${endDateTime}]`, finishLog);
    return ret;
  }

  static async log(...args) {
    const time = new Date().getTime();
    const dateTime = (0, _moment.default)(time).format('YYYY-MM-DD HH:mm:ss');
    args.unshift(`[${dateTime}]`);
    console.log(...args);
  }

  static async mkDir(dir) {
    try {
      if (!_fs.default.existsSync(dir)) {
        _fs.default.mkdirSync(dir);
      }
    } catch {
      await this.mkDir(_path.default.dirname(dir));
      await this.mkDir(dir);
    }
  }

  static async rmDir(dir) {
    if (!_fs.default.existsSync(dir)) {
      return;
    }

    try {
      _fs.default.unlinkSync(dir);
    } catch {
      _fs.default.readdirSync(dir).forEach(async file => {
        const p = `${dir}/${file}`;

        if (_fs.default.statSync(p).isDirectory()) {
          await this.rmDir(p);
        } else {
          _fs.default.unlinkSync(p);
        }
      });
    }
  }

}

Utils.rootDir = _path.default.dirname(_path.default.dirname(__dirname));
Utils.osHomeDir = _os.default.homedir();
var _default = Utils;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL1V0aWxzL2luZGV4LmpzIl0sIm5hbWVzIjpbIlV0aWxzIiwiZ2V0Q29uZmlndXJhdGlvbiIsImtleSIsImNvbmZpZ0ZpbGVuYW1lIiwicm9vdERpciIsImpzb24iLCJGcyIsImV4aXN0c1N5bmMiLCJKc29uRmlsZSIsInJlYWRGaWxlU3luYyIsIkVycm9yIiwiY2FsbCIsImRlc2MiLCJhc3luY0Z1bmMiLCJhcmdzIiwiYmVnaW5UaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJiZWdpbkRhdGVUaW1lIiwiZm9ybWF0Iiwic3RhcnRMb2ciLCJjb25zb2xlIiwibG9nIiwicmV0IiwiZW5kVGltZSIsImVuZERhdGVUaW1lIiwiY29zdFRpbWUiLCJmaW5pc2hMb2ciLCJ0aW1lIiwiZGF0ZVRpbWUiLCJ1bnNoaWZ0IiwibWtEaXIiLCJkaXIiLCJta2RpclN5bmMiLCJQYXRoIiwiZGlybmFtZSIsInJtRGlyIiwidW5saW5rU3luYyIsInJlYWRkaXJTeW5jIiwiZm9yRWFjaCIsImZpbGUiLCJwIiwic3RhdFN5bmMiLCJpc0RpcmVjdG9yeSIsIl9fZGlybmFtZSIsIm9zSG9tZURpciIsIk9zIiwiaG9tZWRpciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUdBLE1BQU1BLEtBQU4sQ0FBWTtBQVNWLGVBQWFDLGdCQUFiLENBQThCQyxHQUE5QixFQUFtQztBQUNqQyxVQUFNQyxjQUFjLEdBQUksR0FBRSxLQUFLQyxPQUFRLFdBQVVGLEdBQUksT0FBckQ7QUFDQSxRQUFJRyxJQUFJLEdBQUcsRUFBWDs7QUFDQSxRQUFJQyxZQUFHQyxVQUFILENBQWNKLGNBQWQsQ0FBSixFQUFtQztBQUNqQ0UsTUFBQUEsSUFBSSxHQUFHRyxrQkFBU0MsWUFBVCxDQUFzQk4sY0FBdEIsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMLFlBQU0sSUFBSU8sS0FBSixDQUFXLFFBQU9QLGNBQWUsTUFBakMs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ZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgRnMgZnJvbSAnZnMnO1xuaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgT3MgZnJvbSAnb3MnO1xuaW1wb3J0IEpzb25GaWxlIGZyb20gJ2pzb25maWxlJztcblxuXG5jbGFzcyBVdGlscyB7XG5cbiAgc3RhdGljIHJvb3REaXIgPSBQYXRoLmRpcm5hbWUoXG4gICAgUGF0aC5kaXJuYW1lKF9fZGlybmFtZSlcbiAgKTtcblxuICBzdGF0aWMgb3NIb21lRGlyID0gT3MuaG9tZWRpcigpO1xuXG5cbiAgc3RhdGljIGFzeW5jIGdldENvbmZpZ3VyYXRpb24oa2V5KSB7XG4gICAgY29uc3QgY29uZmlnRmlsZW5hbWUgPSBgJHt0aGlzLnJvb3REaXJ9L2NvbmZpZy8ke2tleX0uanNvbmA7XG4gICAgbGV0IGpzb24gPSB7fTtcbiAgICBpZiAoRnMuZXhpc3RzU3luYyhjb25maWdGaWxlbmFtZSkpIHtcbiAgICAgIGpzb24gPSBKc29uRmlsZS5yZWFkRmlsZVN5bmMoY29uZmlnRmlsZW5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYOmFjee9ruaWh+S7tiAke2NvbmZpZ0ZpbGVuYW1lfSDkuI3lrZjlnKhgKTtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY2FsbChkZXNjLCBhc3luY0Z1bmMsIGFyZ3MgPSBbXSkge1xuICAgIGNvbnN0IGJlZ2luVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IGJlZ2luRGF0ZVRpbWUgPSBNb21lbnQoYmVnaW5UaW1lKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICBjb25zdCBzdGFydExvZyA9IGBzdGFydCAke2Rlc2N9IC4uLmA7XG4gICAgY29uc29sZS5sb2coYFske2JlZ2luRGF0ZVRpbWV9XWAsIHN0YXJ0TG9nKTtcblxuICAgIGNvbnN0IHJldCA9IGF3YWl0IGFzeW5jRnVuYyguLi5hcmdzKTtcblxuICAgIGNvbnN0IGVuZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBjb25zdCBlbmREYXRlVGltZSA9IE1vbWVudChlbmRUaW1lKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICBjb25zdCBjb3N0VGltZSA9IGVuZFRpbWUgLSBiZWdpblRpbWU7XG4gICAgY29uc3QgZmluaXNoTG9nID0gYGZpbmFsICR7ZGVzY30gPT4gY29zdCAke2Nvc3RUaW1lIC8gMTAwMH0gc2A7XG4gICAgY29uc29sZS5sb2coYFske2VuZERhdGVUaW1lfV1gLCBmaW5pc2hMb2cpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgbG9nKC4uLmFyZ3MpIHtcbiAgICBjb25zdCB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgY29uc3QgZGF0ZVRpbWUgPSBNb21lbnQodGltZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgYXJncy51bnNoaWZ0KGBbJHtkYXRlVGltZX1dYCk7XG4gICAgY29uc29sZS5sb2coLi4uYXJncyk7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgbWtEaXIoZGlyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghRnMuZXhpc3RzU3luYyhkaXIpKSB7XG4gICAgICAgIEZzLm1rZGlyU3luYyhkaXIpO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgYXdhaXQgdGhpcy5ta0RpcihQYXRoLmRpcm5hbWUoZGlyKSk7XG4gICAgICBhd2FpdCB0aGlzLm1rRGlyKGRpcik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHJtRGlyKGRpcikge1xuICAgIGlmICghRnMuZXhpc3RzU3luYyhkaXIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBGcy51bmxpbmtTeW5jKGRpcik7XG4gICAgfSBjYXRjaCB7XG4gICAgICBGc1xuICAgICAgICAucmVhZGRpclN5bmMoZGlyKVxuICAgICAgICAuZm9yRWFjaChhc3luYyAoZmlsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHAgPSBgJHtkaXJ9LyR7ZmlsZX1gO1xuICAgICAgICAgIGlmIChGcy5zdGF0U3luYyhwKS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJtRGlyKHApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBGcy51bmxpbmtTeW5jKHApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVXRpbHM7Il19