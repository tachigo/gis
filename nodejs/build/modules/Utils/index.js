'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _os = _interopRequireDefault(require("os"));

var _jsonfile = _interopRequireDefault(require("jsonfile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Utils {
  static async getConfiguration(key) {
    const configFilename = `${this.rootDir}/config/${key}.json`;
    let json = {};

    if (_fs.default.existsSync(configFilename)) {
      json = _jsonfile.default.readFileSync(configFilename);
    } else {
      throw new Error(`配置文件 ${configFilename} 不存在`);
    }

    return json;
  }

  static async call(desc, asyncFunc, args = []) {
    this.depth += 1;
    let indents = [''];

    if (this.depth !== 0) {
      indents = new Array(this.depth).fill('');
    }

    const beginTime = new Date().getTime();
    const beginDateTime = (0, _moment.default)(beginTime).format('YYYY-MM-DD HH:mm:ss');
    const startLog = `start ${desc} ...`;
    console.log(`[${beginDateTime}]`, ...indents, startLog);
    const ret = await asyncFunc(...args);
    const endTime = new Date().getTime();
    const endDateTime = (0, _moment.default)(endTime).format('YYYY-MM-DD HH:mm:ss');
    const costTime = endTime - beginTime;
    const finishLog = `final ${desc} => cost ${costTime / 1000} s`;
    console.log(`[${endDateTime}]`, ...indents, finishLog);
    this.depth -= 1;
    return ret;
  }

  static async log(...args) {
    const time = new Date().getTime();
    const dateTime = (0, _moment.default)(time).format('YYYY-MM-DD HH:mm:ss');
    args.unshift(`[${dateTime}]`);
    console.log(...args);
  }

  static async mkDir(dir) {
    try {
      if (!_fs.default.existsSync(dir)) {
        _fs.default.mkdirSync(dir);
      }
    } catch {
      await this.mkDir(_path.default.dirname(dir));
      await this.mkDir(dir);
    }
  }

  static async rmDir(dir) {
    if (!_fs.default.existsSync(dir)) {
      return;
    }

    try {
      _fs.default.unlinkSync(dir);
    } catch {
      _fs.default.readdirSync(dir).forEach(async file => {
        const p = `${dir}/${file}`;

        if (_fs.default.statSync(p).isDirectory()) {
          await this.rmDir(p);
        } else {
          _fs.default.unlinkSync(p);
        }
      });
    }
  }

}

Utils.rootDir = _path.default.dirname(_path.default.dirname(__dirname));
Utils.dataDir = _path.default.dirname(_path.default.dirname(_path.default.dirname(__dirname))) + '/data';
Utils.osHomeDir = _os.default.homedir();
Utils.depth = -1;
var _default = Utils;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL1V0aWxzL2luZGV4LmpzIl0sIm5hbWVzIjpbIlV0aWxzIiwiZ2V0Q29uZmlndXJhdGlvbiIsImtleSIsImNvbmZpZ0ZpbGVuYW1lIiwicm9vdERpciIsImpzb24iLCJGcyIsImV4aXN0c1N5bmMiLCJKc29uRmlsZSIsInJlYWRGaWxlU3luYyIsIkVycm9yIiwiY2FsbCIsImRlc2MiLCJhc3luY0Z1bmMiLCJhcmdzIiwiZGVwdGgiLCJpbmRlbnRzIiwiQXJyYXkiLCJmaWxsIiwiYmVnaW5UaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJiZWdpbkRhdGVUaW1lIiwiZm9ybWF0Iiwic3RhcnRMb2ciLCJjb25zb2xlIiwibG9nIiwicmV0IiwiZW5kVGltZSIsImVuZERhdGVUaW1lIiwiY29zdFRpbWUiLCJmaW5pc2hMb2ciLCJ0aW1lIiwiZGF0ZVRpbWUiLCJ1bnNoaWZ0IiwibWtEaXIiLCJkaXIiLCJta2RpclN5bmMiLCJQYXRoIiwiZGlybmFtZSIsInJtRGlyIiwidW5saW5rU3luYyIsInJlYWRkaXJTeW5jIiwiZm9yRWFjaCIsImZpbGUiLCJwIiwic3RhdFN5bmMiLCJpc0RpcmVjdG9yeSIsIl9fZGlybmFtZSIsImRhdGFEaXIiLCJvc0hvbWVEaXIiLCJPcyIsImhvbWVkaXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFHQSxNQUFNQSxLQUFOLENBQVk7QUFjVixlQUFhQyxnQkFBYixDQUE4QkMsR0FBOUIsRUFBbUM7QUFDakMsVUFBTUMsY0FBYyxHQUFJLEdBQUUsS0FBS0MsT0FBUSxXQUFVRixHQUFJLE9BQXJEO0FBQ0EsUUFBSUcsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsUUFBSUMsWUFBR0MsVUFBSCxDQUFjSixjQUFkLENBQUosRUFBbUM7QUFDakNFLE1BQUFBLElBQUksR0FBR0csa0JBQVNDLFlBQVQsQ0FBc0JOLGNBQXRCLENBQVA7QUFDRCxLQUZELE1BRU87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ZUUsV0FBZixFQUFKLEVBQWtDO0FBQ2hDLGdCQUFNLEtBQUtQLEtBQUwsQ0FBV0ssQ0FBWCxDQUFOO0FBQ0QsU0FGRCxNQUVPO0FBQ0x2QyxzQkFBR21DLFVBQUgsQ0FBY0ksQ0FBZDtBQUNEO0FBQ0YsT0FUSDtBQVdEO0FBQ0Y7O0FBdkZTOztBQUFON0MsSyxDQUVHSSxPLEdBQVVrQyxjQUFLQyxPQUFMLENBQ2ZELGNBQUtDLE9BQUwsQ0FBYVMsU0FBYixDQURlLEM7QUFGYmhELEssQ0FNR2lELE8sR0FBVVgsY0FBS0MsT0FBTCxDQUNmRCxjQUFLQyxPQUFMLENBQ0VELGNBQUtDLE9BQUwsQ0FBYVMsU0FBYixDQURGLENBRGUsSUFJYixPO0FBVkFoRCxLLENBWUdrRCxTLEdBQVlDLFlBQUdDLE9BQUgsRTtBQVpmcEQsSyxDQTBCR2UsSyxHQUFRLENBQUMsQztlQWdFSGYsSyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IEZzIGZyb20gJ2ZzJztcbmltcG9ydCBQYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IE9zIGZyb20gJ29zJztcbmltcG9ydCBKc29uRmlsZSBmcm9tICdqc29uZmlsZSc7XG5cblxuY2xhc3MgVXRpbHMge1xuXG4gIHN0YXRpYyByb290RGlyID0gUGF0aC5kaXJuYW1lKFxuICAgIFBhdGguZGlybmFtZShfX2Rpcm5hbWUpXG4gICk7XG5cbiAgc3RhdGljIGRhdGFEaXIgPSBQYXRoLmRpcm5hbWUoXG4gICAgUGF0aC5kaXJuYW1lKFxuICAgICAgUGF0aC5kaXJuYW1lKF9fZGlybmFtZSlcbiAgICApXG4gICkgKyAnL2RhdGEnO1xuXG4gIHN0YXRpYyBvc0hvbWVEaXIgPSBPcy5ob21lZGlyKCk7XG5cbiAgc3RhdGljIGFzeW5jIGdldENvbmZpZ3VyYXRpb24oa2V5KSB7XG4gICAgY29uc3QgY29uZmlnRmlsZW5hbWUgPSBgJHt0aGlzLnJvb3REaXJ9L2NvbmZpZy8ke2tleX0uanNvbmA7XG4gICAgbGV0IGpzb24gPSB7fTtcbiAgICBpZiAoRnMuZXhpc3RzU3luYyhjb25maWdGaWxlbmFtZSkpIHtcbiAgICAgIGpzb24gPSBKc29uRmlsZS5yZWFkRmlsZVN5bmMoY29uZmlnRmlsZW5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYOmFjee9ruaWh+S7tiAke2NvbmZpZ0ZpbGVuYW1lfSDkuI3lrZjlnKhgKTtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuXG4gIHN0YXRpYyBkZXB0aCA9IC0xO1xuXG4gIHN0YXRpYyBhc3luYyBjYWxsKGRlc2MsIGFzeW5jRnVuYywgYXJncyA9IFtdKSB7XG4gICAgdGhpcy5kZXB0aCArPSAxO1xuICAgIGxldCBpbmRlbnRzID0gWycnXTtcbiAgICBpZiAodGhpcy5kZXB0aCAhPT0gMCkge1xuICAgICAgaW5kZW50cyA9IChuZXcgQXJyYXkodGhpcy5kZXB0aCkpLmZpbGwoJycpO1xuICAgIH1cbiAgICBjb25zdCBiZWdpblRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBjb25zdCBiZWdpbkRhdGVUaW1lID0gTW9tZW50KGJlZ2luVGltZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgY29uc3Qgc3RhcnRMb2cgPSBgc3RhcnQgJHtkZXNjfSAuLi5gO1xuICAgIGNvbnNvbGUubG9nKGBbJHtiZWdpbkRhdGVUaW1lfV1gLCAuLi5pbmRlbnRzLCBzdGFydExvZyk7XG5cbiAgICBjb25zdCByZXQgPSBhd2FpdCBhc3luY0Z1bmMoLi4uYXJncyk7XG5cbiAgICBjb25zdCBlbmRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgY29uc3QgZW5kRGF0ZVRpbWUgPSBNb21lbnQoZW5kVGltZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgY29uc3QgY29zdFRpbWUgPSBlbmRUaW1lIC0gYmVnaW5UaW1lO1xuICAgIGNvbnN0IGZpbmlzaExvZyA9IGBmaW5hbCAke2Rlc2N9ID0+IGNvc3QgJHtjb3N0VGltZSAvIDEwMDB9IHNgO1xuICAgIGNvbnNvbGUubG9nKGBbJHtlbmREYXRlVGltZX1dYCwgLi4uaW5kZW50cywgZmluaXNoTG9nKTtcbiAgICB0aGlzLmRlcHRoIC09IDE7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBsb2coLi4uYXJncykge1xuICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBjb25zdCBkYXRlVGltZSA9IE1vbWVudCh0aW1lKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICBhcmdzLnVuc2hpZnQoYFske2RhdGVUaW1lfV1gKTtcbiAgICBjb25zb2xlLmxvZyguLi5hcmdzKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBta0RpcihkaXIpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFGcy5leGlzdHNTeW5jKGRpcikpIHtcbiAgICAgICAgRnMubWtkaXJTeW5jKGRpcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCB7XG4gICAgICBhd2FpdCB0aGlzLm1rRGlyKFBhdGguZGlybmFtZShkaXIpKTtcbiAgICAgIGF3YWl0IHRoaXMubWtEaXIoZGlyKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcm1EaXIoZGlyKSB7XG4gICAgaWYgKCFGcy5leGlzdHNTeW5jKGRpcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIEZzLnVubGlua1N5bmMoZGlyKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIEZzXG4gICAgICAgIC5yZWFkZGlyU3luYyhkaXIpXG4gICAgICAgIC5mb3JFYWNoKGFzeW5jIChmaWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcCA9IGAke2Rpcn0vJHtmaWxlfWA7XG4gICAgICAgICAgaWYgKEZzLnN0YXRTeW5jKHApLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucm1EaXIocCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEZzLnVubGlua1N5bmMocCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVdGlsczsiXX0=