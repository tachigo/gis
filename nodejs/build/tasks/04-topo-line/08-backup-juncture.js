'use strict';

var _modules = _interopRequireDefault(require("./../../modules"));

var _LibTopology = _interopRequireDefault(require("./LibTopology"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  const pg = await _modules.default.PgSQL.pool('localhost');
  const topologyName = 'line_topo';
  const topology = new _LibTopology.default(topologyName);
  await _modules.default.Utils.call(`备份 外国 拓扑数据`, async () => {
    const list = await _LibTopology.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`备份 ${name}#${id} 外圈陆地边界线 拓扑数据`, topology.backupTopologyData.bind(topology), [pg, id, 'outer', 'juncture']);
      await _modules.default.Utils.call(`备份 ${name}#${id} 内圈陆地边界线 拓扑数据`, topology.backupTopologyData.bind(topology), [pg, id, 'inner', 'juncture']);
    }
  });
  await _modules.default.Utils.call(`备份 中国 拓扑数据`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`备份 ${name}#${id} 外圈陆地边界线 拓扑数据`, topology.backupTopologyData.bind(topology), [pg, id, 'outer', 'juncture']);
    await _modules.default.Utils.call(`备份 ${name}#${id} 内圈陆地边界线 拓扑数据`, topology.backupTopologyData.bind(topology), [pg, id, 'inner', 'juncture']);
  });
  await pg.release();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy8wNC10b3BvLWxpbmUvMDgtYmFja3VwLWp1bmN0dXJlLmpzIl0sIm5hbWVzIjpbInBnIiwiJCIsIlBnU1FMIiwicG9vbCIsInRvcG9sb2d5TmFtZSIsInRvcG9sb2d5IiwiTGliVG9wb2xvZ3kiLCJVdGlscyIsImNhbGwiLCJsaXN0IiwiZ2V0Rm9yZWlnbkxpc3QiLCJpdGVtIiwiaWQiLCJuYW1lIiwiYmFja3VwVG9wb2xvZ3lEYXRhIiwiYmluZCIsInJlbGVhc2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUdBOztBQUVBOzs7O0FBR0EsQ0FBQyxZQUFZO0FBQ1gsUUFBTUEsRUFBRSxHQUFHLE1BQU1DLGlCQUFFQyxLQUFGLENBQVFDLElBQVIsQ0FBYSxXQUFiLENBQWpCO0FBQ0EsUUFBTUMsWUFBWSxHQUFHLFdBQXJCO0FBQ0EsUUFBTUMsUUFBUSxHQUFHLElBQUlDLG9CQUFKLENBQWdCRixZQUFoQixDQUFqQjtBQUVBLFFBQU1ILGlCQUFFTSxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUMsSUFBSSxHQUFHLE1BQU1ILHFCQUFZSSxjQUFaLENBQTJCVixFQUEzQixDQUFuQjs7QUFDQSxlQUFXLE1BQU1XLElBQWpCLElBQXlCRixJQUF6QixFQUErQjtBQUM3QixZQUFNRyxFQUFFLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDLElBQUQsQ0FBaEI7QUFDQSxZQUFNRSxJQUFJLEdBQUdGLElBQUksQ0FBQyxNQUFELENBQWpCO0FBQ0EsWUFBTVYsaUJBQUVNLEtBQUYsQ0FBUUMsSUFBUixDQUNILE1BQUtLLElBQUssSUFBR0QsRUFBRyxlQURiLEVBRUpQLFFBQVEsQ0FBQ1Msa0JBQVQsQ0FBNEJDLElBQTVCLENBQWlDVixRQUFqQyxDQUZJLEVBR0osQ0FBQ0wsRUFBRCxFQUFLWSxFQUFMLEVBQVMsT0FBVCxFQUFrQixVQUFsQixDQUhJLENBQU47QUFLQSxZQUFNWCxpQkFBRU0sS0FBRixDQUFRQyxJQUFSLENBQ0gsTUFBS0ssSUFBSyxJQUFHRCxFQUFHLGVBRGIsRUFFSlAsUUFBUSxDQUFDUyxrQkFBVCxDQUE0QkMsSUFBNUIsQ0FBaUNWLFFBQWpDLENBRkksRUFHSixDQUFDTCxFQUFELEVBQUtZLEVBQUwsRUFBUyxPQUFULEVBQWtCLFVBQWxCLENBSEksQ0FBTjtBQUtEO0FBQ0YsR0FoQkssQ0FBTjtBQWtCQSxRQUFNWCxpQkFBRU0sS0FBRixDQUFRQyxJQUFSLENBQWMsWUFBZCxFQUEyQixZQUFZO0FBQzNDLFVBQU1JLEVBQUUsR0FBRyxDQUFYO0FBQ0EsVUFBTUMsSUFBSSxHQUFHLElBQWI7QUFDQSxVQUFNWixpQkFBRU0sS0FBRixDQUFRQyxJQUFSLENBQ0gsTUFBS0ssSUFBSyxJQUFHRCxFQUFHLGVBRGIsRUFFSlAsUUFBUSxDQUFDUyxrQkFBVCxDQUE0QkMsSUFBNUIsQ0FBaUNWLFFBQWpDLENBRkksRUFHSixDQUFDTCxFQUFELEVBQUtZLEVBQUwsRUFBUyxPQUFULEVBQWtCLFVBQWxCLENBSEksQ0FBTjtBQUtBLFVBQU1YLGlCQUFFTSxLQUFGLENBQVFDLElBQVIsQ0FDSCxNQUFLSyxJQUFLLElBQUdELEVBQUcsZUFEYixFQUVKUCxRQUFRLENBQUNTLGtCQUFULENBQTRCQyxJQUE1QixDQUFpQ1YsUUFBakMsQ0FGSSxFQUdKLENBQUNMLEVBQUQsRUFBS1ksRUFBTCxFQUFTLE9BQVQsRUFBa0IsVUFBbEIsQ0FISSxDQUFOO0FBS0QsR0FiSyxDQUFOO0FBZUEsUUFBTVosRUFBRSxDQUFDZ0IsT0FBSCxFQUFOO0FBQ0QsQ0F2Q0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxuaW1wb3J0ICQgZnJvbSAnLi8uLi8uLi9tb2R1bGVzJztcblxuaW1wb3J0IExpYlRvcG9sb2d5IGZyb20gJy4vTGliVG9wb2xvZ3knO1xuXG5cbihhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHBnID0gYXdhaXQgJC5QZ1NRTC5wb29sKCdsb2NhbGhvc3QnKTtcbiAgY29uc3QgdG9wb2xvZ3lOYW1lID0gJ2xpbmVfdG9wbyc7XG4gIGNvbnN0IHRvcG9sb2d5ID0gbmV3IExpYlRvcG9sb2d5KHRvcG9sb2d5TmFtZSk7XG5cbiAgYXdhaXQgJC5VdGlscy5jYWxsKGDlpIfku70g5aSW5Zu9IOaLk+aJkeaVsOaNrmAsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBsaXN0ID0gYXdhaXQgTGliVG9wb2xvZ3kuZ2V0Rm9yZWlnbkxpc3QocGcpO1xuICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBsaXN0KSB7XG4gICAgICBjb25zdCBpZCA9ICtpdGVtWydpZCddO1xuICAgICAgY29uc3QgbmFtZSA9IGl0ZW1bJ25hbWUnXTtcbiAgICAgIGF3YWl0ICQuVXRpbHMuY2FsbChcbiAgICAgICAgYOWkh+S7vSAke25hbWV9IyR7aWR9IOWkluWciOmZhuWcsOi+ueeVjOe6vyDmi5PmiZHmlbDmja5gLFxuICAgICAgICB0b3BvbG9neS5iYWNrdXBUb3BvbG9neURhdGEuYmluZCh0b3BvbG9neSksXG4gICAgICAgIFtwZywgaWQsICdvdXRlcicsICdqdW5jdHVyZSddXG4gICAgICApO1xuICAgICAgYXdhaXQgJC5VdGlscy5jYWxsKFxuICAgICAgICBg5aSH5Lu9ICR7bmFtZX0jJHtpZH0g5YaF5ZyI6ZmG5Zyw6L6555WM57q/IOaLk+aJkeaVsOaNrmAsXG4gICAgICAgIHRvcG9sb2d5LmJhY2t1cFRvcG9sb2d5RGF0YS5iaW5kKHRvcG9sb2d5KSxcbiAgICAgICAgW3BnLCBpZCwgJ2lubmVyJywgJ2p1bmN0dXJlJ11cbiAgICAgICk7XG4gICAgfVxuICB9KTtcblxuICBhd2FpdCAkLlV0aWxzLmNhbGwoYOWkh+S7vSDkuK3lm70g5ouT5omR5pWw5o2uYCwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGlkID0gMTtcbiAgICBjb25zdCBuYW1lID0gJ+S4reWbvSc7XG4gICAgYXdhaXQgJC5VdGlscy5jYWxsKFxuICAgICAgYOWkh+S7vSAke25hbWV9IyR7aWR9IOWkluWciOmZhuWcsOi+ueeVjOe6vyDmi5PmiZHmlbDmja5gLFxuICAgICAgdG9wb2xvZ3kuYmFja3VwVG9wb2xvZ3lEYXRhLmJpbmQodG9wb2xvZ3kpLFxuICAgICAgW3BnLCBpZCwgJ291dGVyJywgJ2p1bmN0dXJlJ11cbiAgICApO1xuICAgIGF3YWl0ICQuVXRpbHMuY2FsbChcbiAgICAgIGDlpIfku70gJHtuYW1lfSMke2lkfSDlhoXlnIjpmYblnLDovrnnlYznur8g5ouT5omR5pWw5o2uYCxcbiAgICAgIHRvcG9sb2d5LmJhY2t1cFRvcG9sb2d5RGF0YS5iaW5kKHRvcG9sb2d5KSxcbiAgICAgIFtwZywgaWQsICdpbm5lcicsICdqdW5jdHVyZSddXG4gICAgKTtcbiAgfSk7XG5cbiAgYXdhaXQgcGcucmVsZWFzZSgpO1xufSkoKTsiXX0=