'use strict';

var _modules = _interopRequireDefault(require("./../../modules"));

var _LibTopoLine = _interopRequireDefault(require("./LibTopoLine"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  const pg = await _modules.default.PgSQL.client('localhost');
  const topologyName = 'line_topo';
  const dumpTable = 'line_dump';
  const topoTable = 'line_topo';
  const schema = 'topo';
  const topology = new _LibTopoLine.default(topologyName, dumpTable, topoTable, schema);
  await _modules.default.Utils.call(`备份 外国 拓扑数据`, async () => {
    const list = await _LibTopoLine.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`备份 ${name}#${id} 外圈陆地边界线 拓扑数据`, topology.backupTopologyData.bind(topology), [pg, id, 'outer', 'juncture']);
      await _modules.default.Utils.call(`备份 ${name}#${id} 内圈陆地边界线 拓扑数据`, topology.backupTopologyData.bind(topology), [pg, id, 'inner', 'juncture']);
    }
  });
  await _modules.default.Utils.call(`备份 中国 拓扑数据`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`备份 ${name}#${id} 外圈陆地边界线 拓扑数据`, topology.backupTopologyData.bind(topology), [pg, id, 'outer', 'juncture']);
    await _modules.default.Utils.call(`备份 ${name}#${id} 内圈陆地边界线 拓扑数据`, topology.backupTopologyData.bind(topology), [pg, id, 'inner', 'juncture']);
  });
  await pg.release();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy8wNC10b3BvLWxpbmUvMDgtYmFja3VwLWp1bmN0dXJlLmpzIl0sIm5hbWVzIjpbInBnIiwiJCIsIlBnU1FMIiwiY2xpZW50IiwidG9wb2xvZ3lOYW1lIiwiZHVtcFRhYmxlIiwidG9wb1RhYmxlIiwic2NoZW1hIiwidG9wb2xvZ3kiLCJMaWJUb3BvTGluZSIsIlV0aWxzIiwiY2FsbCIsImxpc3QiLCJnZXRGb3JlaWduTGlzdCIsIml0ZW0iLCJpZCIsIm5hbWUiLCJiYWNrdXBUb3BvbG9neURhdGEiLCJiaW5kIiwicmVsZWFzZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0E7O0FBRUE7Ozs7QUFHQSxDQUFDLFlBQVk7QUFDWCxRQUFNQSxFQUFFLEdBQUcsTUFBTUMsaUJBQUVDLEtBQUYsQ0FBUUMsTUFBUixDQUFlLFdBQWYsQ0FBakI7QUFDQSxRQUFNQyxZQUFZLEdBQUcsV0FBckI7QUFDQSxRQUFNQyxTQUFTLEdBQUcsV0FBbEI7QUFDQSxRQUFNQyxTQUFTLEdBQUcsV0FBbEI7QUFDQSxRQUFNQyxNQUFNLEdBQUcsTUFBZjtBQUNBLFFBQU1DLFFBQVEsR0FBRyxJQUFJQyxvQkFBSixDQUFnQkwsWUFBaEIsRUFBOEJDLFNBQTlCLEVBQXlDQyxTQUF6QyxFQUFvREMsTUFBcEQsQ0FBakI7QUFFQSxRQUFNTixpQkFBRVMsS0FBRixDQUFRQyxJQUFSLENBQWMsWUFBZCxFQUEyQixZQUFZO0FBQzNDLFVBQU1DLElBQUksR0FBRyxNQUFNSCxxQkFBWUksY0FBWixDQUEyQmIsRUFBM0IsQ0FBbkI7O0FBQ0EsZUFBVyxNQUFNYyxJQUFqQixJQUF5QkYsSUFBekIsRUFBK0I7QUFDN0IsWUFBTUcsRUFBRSxHQUFHLENBQUNELElBQUksQ0FBQyxJQUFELENBQWhCO0FBQ0EsWUFBTUUsSUFBSSxHQUFHRixJQUFJLENBQUMsTUFBRCxDQUFqQjtBQUNBLFlBQU1iLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FDSCxNQUFLSyxJQUFLLElBQUdELEVBQUcsZUFEYixFQUVKUCxRQUFRLENBQUNTLGtCQUFULENBQTRCQyxJQUE1QixDQUFpQ1YsUUFBakMsQ0FGSSxFQUdKLENBQUNSLEVBQUQsRUFBS2UsRUFBTCxFQUFTLE9BQVQsRUFBa0IsVUFBbEIsQ0FISSxDQUFOO0FBS0EsWUFBTWQsaUJBQUVTLEtBQUYsQ0FBUUMsSUFBUixDQUNILE1BQUtLLElBQUssSUFBR0QsRUFBRyxlQURiLEVBRUpQLFFBQVEsQ0FBQ1Msa0JBQVQsQ0FBNEJDLElBQTVCLENBQWlDVixRQUFqQyxDQUZJLEVBR0osQ0FBQ1IsRUFBRCxFQUFLZSxFQUFMLEVBQVMsT0FBVCxFQUFrQixVQUFsQixDQUhJLENBQU47QUFLRDtBQUNGLEdBaEJLLENBQU47QUFrQkEsUUFBTWQsaUJBQUVTLEtBQUYsQ0FBUUMsSUFBUixDQUFjLFlBQWQsRUFBMkIsWUFBWTtBQUMzQyxVQUFNSSxFQUFFLEdBQUcsQ0FBWDtBQUNBLFVBQU1DLElBQUksR0FBRyxJQUFiO0FBQ0EsVUFBTWYsaUJBQUVTLEtBQUYsQ0FBUUMsSUFBUixDQUNILE1BQUtLLElBQUssSUFBR0QsRUFBRyxlQURiLEVBRUpQLFFBQVEsQ0FBQ1Msa0JBQVQsQ0FBNEJDLElBQTVCLENBQWlDVixRQUFqQyxDQUZJLEVBR0osQ0FBQ1IsRUFBRCxFQUFLZSxFQUFMLEVBQVMsT0FBVCxFQUFrQixVQUFsQixDQUhJLENBQU47QUFLQSxVQUFNZCxpQkFBRVMsS0FBRixDQUFRQyxJQUFSLENBQ0gsTUFBS0ssSUFBSyxJQUFHRCxFQUFHLGVBRGIsRUFFSlAsUUFBUSxDQUFDUyxrQkFBVCxDQUE0QkMsSUFBNUIsQ0FBaUNWLFFBQWpDLENBRkksRUFHSixDQUFDUixFQUFELEVBQUtlLEVBQUwsRUFBUyxPQUFULEVBQWtCLFVBQWxCLENBSEksQ0FBTjtBQUtELEdBYkssQ0FBTjtBQWVBLFFBQU1mLEVBQUUsQ0FBQ21CLE9BQUgsRUFBTjtBQUNELENBMUNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5cbmltcG9ydCAkIGZyb20gJy4vLi4vLi4vbW9kdWxlcyc7XG5cbmltcG9ydCBMaWJUb3BvTGluZSBmcm9tICcuL0xpYlRvcG9MaW5lJztcblxuXG4oYXN5bmMgKCkgPT4ge1xuICBjb25zdCBwZyA9IGF3YWl0ICQuUGdTUUwuY2xpZW50KCdsb2NhbGhvc3QnKTtcbiAgY29uc3QgdG9wb2xvZ3lOYW1lID0gJ2xpbmVfdG9wbyc7XG4gIGNvbnN0IGR1bXBUYWJsZSA9ICdsaW5lX2R1bXAnO1xuICBjb25zdCB0b3BvVGFibGUgPSAnbGluZV90b3BvJztcbiAgY29uc3Qgc2NoZW1hID0gJ3RvcG8nO1xuICBjb25zdCB0b3BvbG9neSA9IG5ldyBMaWJUb3BvTGluZSh0b3BvbG9neU5hbWUsIGR1bXBUYWJsZSwgdG9wb1RhYmxlLCBzY2hlbWEpO1xuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5aSH5Lu9IOWkluWbvSDmi5PmiZHmlbDmja5gLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbGlzdCA9IGF3YWl0IExpYlRvcG9MaW5lLmdldEZvcmVpZ25MaXN0KHBnKTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgICAgY29uc3QgaWQgPSAraXRlbVsnaWQnXTtcbiAgICAgIGNvbnN0IG5hbWUgPSBpdGVtWyduYW1lJ107XG4gICAgICBhd2FpdCAkLlV0aWxzLmNhbGwoXG4gICAgICAgIGDlpIfku70gJHtuYW1lfSMke2lkfSDlpJblnIjpmYblnLDovrnnlYznur8g5ouT5omR5pWw5o2uYCxcbiAgICAgICAgdG9wb2xvZ3kuYmFja3VwVG9wb2xvZ3lEYXRhLmJpbmQodG9wb2xvZ3kpLFxuICAgICAgICBbcGcsIGlkLCAnb3V0ZXInLCAnanVuY3R1cmUnXVxuICAgICAgKTtcbiAgICAgIGF3YWl0ICQuVXRpbHMuY2FsbChcbiAgICAgICAgYOWkh+S7vSAke25hbWV9IyR7aWR9IOWGheWciOmZhuWcsOi+ueeVjOe6vyDmi5PmiZHmlbDmja5gLFxuICAgICAgICB0b3BvbG9neS5iYWNrdXBUb3BvbG9neURhdGEuYmluZCh0b3BvbG9neSksXG4gICAgICAgIFtwZywgaWQsICdpbm5lcicsICdqdW5jdHVyZSddXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgYXdhaXQgJC5VdGlscy5jYWxsKGDlpIfku70g5Lit5Zu9IOaLk+aJkeaVsOaNrmAsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpZCA9IDE7XG4gICAgY29uc3QgbmFtZSA9ICfkuK3lm70nO1xuICAgIGF3YWl0ICQuVXRpbHMuY2FsbChcbiAgICAgIGDlpIfku70gJHtuYW1lfSMke2lkfSDlpJblnIjpmYblnLDovrnnlYznur8g5ouT5omR5pWw5o2uYCxcbiAgICAgIHRvcG9sb2d5LmJhY2t1cFRvcG9sb2d5RGF0YS5iaW5kKHRvcG9sb2d5KSxcbiAgICAgIFtwZywgaWQsICdvdXRlcicsICdqdW5jdHVyZSddXG4gICAgKTtcbiAgICBhd2FpdCAkLlV0aWxzLmNhbGwoXG4gICAgICBg5aSH5Lu9ICR7bmFtZX0jJHtpZH0g5YaF5ZyI6ZmG5Zyw6L6555WM57q/IOaLk+aJkeaVsOaNrmAsXG4gICAgICB0b3BvbG9neS5iYWNrdXBUb3BvbG9neURhdGEuYmluZCh0b3BvbG9neSksXG4gICAgICBbcGcsIGlkLCAnaW5uZXInLCAnanVuY3R1cmUnXVxuICAgICk7XG4gIH0pO1xuXG4gIGF3YWl0IHBnLnJlbGVhc2UoKTtcbn0pKCk7Il19