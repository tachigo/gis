'use strict';

var _modules = _interopRequireDefault(require("./../../modules"));

var _LibTopology = _interopRequireDefault(require("./LibTopology"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  const pg = await _modules.default.PgSQL.pool('localhost');
  const topologyName = 'line_topo';
  const topology = new _LibTopology.default(topologyName);
  await _modules.default.Utils.call(`外国 外圈陆地边界线`, async () => {
    const list = await _LibTopology.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, topology.mapJuncture.bind(topology), [pg, id, 'outer']);
    }
  });
  await _modules.default.Utils.call(`中国 外圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, topology.mapJuncture.bind(topology), [pg, id, 'outer']);
  });
  await _modules.default.Utils.call(`外国 内圈陆地边界线`, async () => {
    const list = await _LibTopology.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, topology.mapJuncture.bind(topology), [pg, id, 'inner']);
    }
  });
  await _modules.default.Utils.call(`中国 内圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, topology.mapJuncture.bind(topology), [pg, id, 'inner']);
  });
  await pg.release();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy8wNC10b3BvLWxpbmUvMDYtbWFwLWp1bmN0dXJlLmpzIl0sIm5hbWVzIjpbInBnIiwiJCIsIlBnU1FMIiwicG9vbCIsInRvcG9sb2d5TmFtZSIsInRvcG9sb2d5IiwiTGliVG9wb2xvZ3kiLCJVdGlscyIsImNhbGwiLCJsaXN0IiwiZ2V0Rm9yZWlnbkxpc3QiLCJpdGVtIiwiaWQiLCJuYW1lIiwibWFwSnVuY3R1cmUiLCJiaW5kIiwicmVsZWFzZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0E7O0FBRUE7Ozs7QUFHQSxDQUFDLFlBQVk7QUFDWCxRQUFNQSxFQUFFLEdBQUcsTUFBTUMsaUJBQUVDLEtBQUYsQ0FBUUMsSUFBUixDQUFhLFdBQWIsQ0FBakI7QUFDQSxRQUFNQyxZQUFZLEdBQUcsV0FBckI7QUFDQSxRQUFNQyxRQUFRLEdBQUcsSUFBSUMsb0JBQUosQ0FBZ0JGLFlBQWhCLENBQWpCO0FBRUEsUUFBTUgsaUJBQUVNLEtBQUYsQ0FBUUMsSUFBUixDQUFjLFlBQWQsRUFBMkIsWUFBWTtBQUMzQyxVQUFNQyxJQUFJLEdBQUcsTUFBTUgscUJBQVlJLGNBQVosQ0FBMkJWLEVBQTNCLENBQW5COztBQUNBLGVBQVcsTUFBTVcsSUFBakIsSUFBeUJGLElBQXpCLEVBQStCO0FBQzdCLFlBQU1HLEVBQUUsR0FBRyxDQUFDRCxJQUFJLENBQUMsSUFBRCxDQUFoQjtBQUNBLFlBQU1FLElBQUksR0FBR0YsSUFBSSxDQUFDLE1BQUQsQ0FBakI7QUFDQSxZQUFNVixpQkFBRU0sS0FBRixDQUFRQyxJQUFSLENBQWMsR0FBRUssSUFBSyxJQUFHRCxFQUFHLFVBQTNCLEVBQXNDUCxRQUFRLENBQUNTLFdBQVQsQ0FBcUJDLElBQXJCLENBQTBCVixRQUExQixDQUF0QyxFQUEyRSxDQUFDTCxFQUFELEVBQUtZLEVBQUwsRUFBUyxPQUFULENBQTNFLENBQU47QUFDRDtBQUNGLEdBUEssQ0FBTjtBQVNBLFFBQU1YLGlCQUFFTSxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUksRUFBRSxHQUFHLENBQVg7QUFDQSxVQUFNQyxJQUFJLEdBQUcsSUFBYjtBQUNBLFVBQU1aLGlCQUFFTSxLQUFGLENBQVFDLElBQVIsQ0FBYyxHQUFFSyxJQUFLLElBQUdELEVBQUcsVUFBM0IsRUFBc0NQLFFBQVEsQ0FBQ1MsV0FBVCxDQUFxQkMsSUFBckIsQ0FBMEJWLFFBQTFCLENBQXRDLEVBQTJFLENBQUNMLEVBQUQsRUFBS1ksRUFBTCxFQUFTLE9BQVQsQ0FBM0UsQ0FBTjtBQUNELEdBSkssQ0FBTjtBQU1BLFFBQU1YLGlCQUFFTSxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUMsSUFBSSxHQUFHLE1BQU1ILHFCQUFZSSxjQUFaLENBQTJCVixFQUEzQixDQUFuQjs7QUFDQSxlQUFXLE1BQU1XLElBQWpCLElBQXlCRixJQUF6QixFQUErQjtBQUM3QixZQUFNRyxFQUFFLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDLElBQUQsQ0FBaEI7QUFDQSxZQUFNRSxJQUFJLEdBQUdGLElBQUksQ0FBQyxNQUFELENBQWpCO0FBQ0EsWUFBTVYsaUJBQUVNLEtBQUYsQ0FBUUMsSUFBUixDQUFjLEdBQUVLLElBQUssSUFBR0QsRUFBRyxVQUEzQixFQUFzQ1AsUUFBUSxDQUFDUyxXQUFULENBQXFCQyxJQUFyQixDQUEwQlYsUUFBMUIsQ0FBdEMsRUFBMkUsQ0FBQ0wsRUFBRCxFQUFLWSxFQUFMLEVBQVMsT0FBVCxDQUEzRSxDQUFOO0FBQ0Q7QUFDRixHQVBLLENBQU47QUFTQSxRQUFNWCxpQkFBRU0sS0FBRixDQUFRQyxJQUFSLENBQWMsWUFBZCxFQUEyQixZQUFZO0FBQzNDLFVBQU1JLEVBQUUsR0FBRyxDQUFYO0FBQ0EsVUFBTUMsSUFBSSxHQUFHLElBQWI7QUFDQSxVQUFNWixpQkFBRU0sS0FBRixDQUFRQyxJQUFSLENBQWMsR0FBRUssSUFBSyxJQUFHRCxFQUFHLFVBQTNCLEVBQXNDUCxRQUFRLENBQUNTLFdBQVQsQ0FBcUJDLElBQXJCLENBQTBCVixRQUExQixDQUF0QyxFQUEyRSxDQUFDTCxFQUFELEVBQUtZLEVBQUwsRUFBUyxPQUFULENBQTNFLENBQU47QUFDRCxHQUpLLENBQU47QUFNQSxRQUFNWixFQUFFLENBQUNnQixPQUFILEVBQU47QUFDRCxDQXBDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG5pbXBvcnQgJCBmcm9tICcuLy4uLy4uL21vZHVsZXMnO1xuXG5pbXBvcnQgTGliVG9wb2xvZ3kgZnJvbSAnLi9MaWJUb3BvbG9neSc7XG5cblxuKGFzeW5jICgpID0+IHtcbiAgY29uc3QgcGcgPSBhd2FpdCAkLlBnU1FMLnBvb2woJ2xvY2FsaG9zdCcpO1xuICBjb25zdCB0b3BvbG9neU5hbWUgPSAnbGluZV90b3BvJztcbiAgY29uc3QgdG9wb2xvZ3kgPSBuZXcgTGliVG9wb2xvZ3kodG9wb2xvZ3lOYW1lKTtcblxuICBhd2FpdCAkLlV0aWxzLmNhbGwoYOWkluWbvSDlpJblnIjpmYblnLDovrnnlYznur9gLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbGlzdCA9IGF3YWl0IExpYlRvcG9sb2d5LmdldEZvcmVpZ25MaXN0KHBnKTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgICAgY29uc3QgaWQgPSAraXRlbVsnaWQnXTtcbiAgICAgIGNvbnN0IG5hbWUgPSBpdGVtWyduYW1lJ107XG4gICAgICBhd2FpdCAkLlV0aWxzLmNhbGwoYCR7bmFtZX0jJHtpZH0g5aSW5ZyI6ZmG5Zyw6L6555WM57q/YCwgdG9wb2xvZ3kubWFwSnVuY3R1cmUuYmluZCh0b3BvbG9neSksIFtwZywgaWQsICdvdXRlciddKTtcbiAgICB9XG4gIH0pO1xuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5Lit5Zu9IOWkluWciOmZhuWcsOi+ueeVjOe6v2AsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpZCA9IDE7XG4gICAgY29uc3QgbmFtZSA9ICfkuK3lm70nO1xuICAgIGF3YWl0ICQuVXRpbHMuY2FsbChgJHtuYW1lfSMke2lkfSDlpJblnIjpmYblnLDovrnnlYznur9gLCB0b3BvbG9neS5tYXBKdW5jdHVyZS5iaW5kKHRvcG9sb2d5KSwgW3BnLCBpZCwgJ291dGVyJ10pO1xuICB9KTtcblxuICBhd2FpdCAkLlV0aWxzLmNhbGwoYOWkluWbvSDlhoXlnIjpmYblnLDovrnnlYznur9gLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbGlzdCA9IGF3YWl0IExpYlRvcG9sb2d5LmdldEZvcmVpZ25MaXN0KHBnKTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgICAgY29uc3QgaWQgPSAraXRlbVsnaWQnXTtcbiAgICAgIGNvbnN0IG5hbWUgPSBpdGVtWyduYW1lJ107XG4gICAgICBhd2FpdCAkLlV0aWxzLmNhbGwoYCR7bmFtZX0jJHtpZH0g5YaF5ZyI6ZmG5Zyw6L6555WM57q/YCwgdG9wb2xvZ3kubWFwSnVuY3R1cmUuYmluZCh0b3BvbG9neSksIFtwZywgaWQsICdpbm5lciddKTtcbiAgICB9XG4gIH0pO1xuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5Lit5Zu9IOWGheWciOmZhuWcsOi+ueeVjOe6v2AsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpZCA9IDE7XG4gICAgY29uc3QgbmFtZSA9ICfkuK3lm70nO1xuICAgIGF3YWl0ICQuVXRpbHMuY2FsbChgJHtuYW1lfSMke2lkfSDlhoXlnIjpmYblnLDovrnnlYznur9gLCB0b3BvbG9neS5tYXBKdW5jdHVyZS5iaW5kKHRvcG9sb2d5KSwgW3BnLCBpZCwgJ2lubmVyJ10pO1xuICB9KTtcblxuICBhd2FpdCBwZy5yZWxlYXNlKCk7XG59KSgpOyJdfQ==