'use strict';

var _modules = _interopRequireDefault(require("./../../modules"));

var _LibTopology = _interopRequireDefault(require("./LibTopology"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  const pg = await _modules.default.PgSQL.pool('localhost');
  const topologyName = 'line_topo';
  const topology = new _LibTopology.default(topologyName);
  await _modules.default.Utils.call(`外国 外圈陆地边界线`, async () => {
    const list = await _LibTopology.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, topology.edgeJuncture.bind(topology), [pg, id, 'outer']);
    }
  });
  await _modules.default.Utils.call(`中国 外圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, topology.edgeJuncture.bind(topology), [pg, id, 'outer']);
  });
  await _modules.default.Utils.call(`外国 内圈陆地边界线`, async () => {
    const list = await _LibTopology.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, topology.edgeJuncture.bind(topology), [pg, id, 'inner']);
    }
  });
  await _modules.default.Utils.call(`中国 内圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, topology.edgeJuncture.bind(topology), [pg, id, 'inner']);
  });
  await pg.release();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy8wNC10b3BvLWxpbmUvMDItZWRnZS1qdW5jdHVyZS5qcyJdLCJuYW1lcyI6WyJwZyIsIiQiLCJQZ1NRTCIsInBvb2wiLCJ0b3BvbG9neU5hbWUiLCJ0b3BvbG9neSIsIkxpYlRvcG9sb2d5IiwiVXRpbHMiLCJjYWxsIiwibGlzdCIsImdldEZvcmVpZ25MaXN0IiwiaXRlbSIsImlkIiwibmFtZSIsImVkZ2VKdW5jdHVyZSIsImJpbmQiLCJyZWxlYXNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFHQTs7QUFFQTs7OztBQUdBLENBQUMsWUFBWTtBQUNYLFFBQU1BLEVBQUUsR0FBRyxNQUFNQyxpQkFBRUMsS0FBRixDQUFRQyxJQUFSLENBQWEsV0FBYixDQUFqQjtBQUNBLFFBQU1DLFlBQVksR0FBRyxXQUFyQjtBQUNBLFFBQU1DLFFBQVEsR0FBRyxJQUFJQyxvQkFBSixDQUFnQkYsWUFBaEIsQ0FBakI7QUFFQSxRQUFNSCxpQkFBRU0sS0FBRixDQUFRQyxJQUFSLENBQWMsWUFBZCxFQUEyQixZQUFZO0FBQzNDLFVBQU1DLElBQUksR0FBRyxNQUFNSCxxQkFBWUksY0FBWixDQUEyQlYsRUFBM0IsQ0FBbkI7O0FBQ0EsZUFBVyxNQUFNVyxJQUFqQixJQUF5QkYsSUFBekIsRUFBK0I7QUFDN0IsWUFBTUcsRUFBRSxHQUFHLENBQUNELElBQUksQ0FBQyxJQUFELENBQWhCO0FBQ0EsWUFBTUUsSUFBSSxHQUFHRixJQUFJLENBQUMsTUFBRCxDQUFqQjtBQUNBLFlBQU1WLGlCQUFFTSxLQUFGLENBQVFDLElBQVIsQ0FBYyxHQUFFSyxJQUFLLElBQUdELEVBQUcsVUFBM0IsRUFBc0NQLFFBQVEsQ0FBQ1MsWUFBVCxDQUFzQkMsSUFBdEIsQ0FBMkJWLFFBQTNCLENBQXRDLEVBQTRFLENBQUNMLEVBQUQsRUFBS1ksRUFBTCxFQUFTLE9BQVQsQ0FBNUUsQ0FBTjtBQUNEO0FBQ0YsR0FQSyxDQUFOO0FBU0EsUUFBTVgsaUJBQUVNLEtBQUYsQ0FBUUMsSUFBUixDQUFjLFlBQWQsRUFBMkIsWUFBWTtBQUMzQyxVQUFNSSxFQUFFLEdBQUcsQ0FBWDtBQUNBLFVBQU1DLElBQUksR0FBRyxJQUFiO0FBQ0EsVUFBTVosaUJBQUVNLEtBQUYsQ0FBUUMsSUFBUixDQUFjLEdBQUVLLElBQUssSUFBR0QsRUFBRyxVQUEzQixFQUFzQ1AsUUFBUSxDQUFDUyxZQUFULENBQXNCQyxJQUF0QixDQUEyQlYsUUFBM0IsQ0FBdEMsRUFBNEUsQ0FBQ0wsRUFBRCxFQUFLWSxFQUFMLEVBQVMsT0FBVCxDQUE1RSxDQUFOO0FBQ0QsR0FKSyxDQUFOO0FBTUEsUUFBTVgsaUJBQUVNLEtBQUYsQ0FBUUMsSUFBUixDQUFjLFlBQWQsRUFBMkIsWUFBWTtBQUMzQyxVQUFNQyxJQUFJLEdBQUcsTUFBTUgscUJBQVlJLGNBQVosQ0FBMkJWLEVBQTNCLENBQW5COztBQUNBLGVBQVcsTUFBTVcsSUFBakIsSUFBeUJGLElBQXpCLEVBQStCO0FBQzdCLFlBQU1HLEVBQUUsR0FBRyxDQUFDRCxJQUFJLENBQUMsSUFBRCxDQUFoQjtBQUNBLFlBQU1FLElBQUksR0FBR0YsSUFBSSxDQUFDLE1BQUQsQ0FBakI7QUFDQSxZQUFNVixpQkFBRU0sS0FBRixDQUFRQyxJQUFSLENBQWMsR0FBRUssSUFBSyxJQUFHRCxFQUFHLFVBQTNCLEVBQXNDUCxRQUFRLENBQUNTLFlBQVQsQ0FBc0JDLElBQXRCLENBQTJCVixRQUEzQixDQUF0QyxFQUE0RSxDQUFDTCxFQUFELEVBQUtZLEVBQUwsRUFBUyxPQUFULENBQTVFLENBQU47QUFDRDtBQUNGLEdBUEssQ0FBTjtBQVNBLFFBQU1YLGlCQUFFTSxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUksRUFBRSxHQUFHLENBQVg7QUFDQSxVQUFNQyxJQUFJLEdBQUcsSUFBYjtBQUNBLFVBQU1aLGlCQUFFTSxLQUFGLENBQVFDLElBQVIsQ0FBYyxHQUFFSyxJQUFLLElBQUdELEVBQUcsVUFBM0IsRUFBc0NQLFFBQVEsQ0FBQ1MsWUFBVCxDQUFzQkMsSUFBdEIsQ0FBMkJWLFFBQTNCLENBQXRDLEVBQTRFLENBQUNMLEVBQUQsRUFBS1ksRUFBTCxFQUFTLE9BQVQsQ0FBNUUsQ0FBTjtBQUNELEdBSkssQ0FBTjtBQU1BLFFBQU1aLEVBQUUsQ0FBQ2dCLE9BQUgsRUFBTjtBQUNELENBcENEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5cbmltcG9ydCAkIGZyb20gJy4vLi4vLi4vbW9kdWxlcyc7XG5cbmltcG9ydCBMaWJUb3BvbG9neSBmcm9tICcuL0xpYlRvcG9sb2d5JztcblxuXG4oYXN5bmMgKCkgPT4ge1xuICBjb25zdCBwZyA9IGF3YWl0ICQuUGdTUUwucG9vbCgnbG9jYWxob3N0Jyk7XG4gIGNvbnN0IHRvcG9sb2d5TmFtZSA9ICdsaW5lX3RvcG8nO1xuICBjb25zdCB0b3BvbG9neSA9IG5ldyBMaWJUb3BvbG9neSh0b3BvbG9neU5hbWUpO1xuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5aSW5Zu9IOWkluWciOmZhuWcsOi+ueeVjOe6v2AsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBsaXN0ID0gYXdhaXQgTGliVG9wb2xvZ3kuZ2V0Rm9yZWlnbkxpc3QocGcpO1xuICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBsaXN0KSB7XG4gICAgICBjb25zdCBpZCA9ICtpdGVtWydpZCddO1xuICAgICAgY29uc3QgbmFtZSA9IGl0ZW1bJ25hbWUnXTtcbiAgICAgIGF3YWl0ICQuVXRpbHMuY2FsbChgJHtuYW1lfSMke2lkfSDlpJblnIjpmYblnLDovrnnlYznur9gLCB0b3BvbG9neS5lZGdlSnVuY3R1cmUuYmluZCh0b3BvbG9neSksIFtwZywgaWQsICdvdXRlciddKTtcbiAgICB9XG4gIH0pO1xuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5Lit5Zu9IOWkluWciOmZhuWcsOi+ueeVjOe6v2AsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpZCA9IDE7XG4gICAgY29uc3QgbmFtZSA9ICfkuK3lm70nO1xuICAgIGF3YWl0ICQuVXRpbHMuY2FsbChgJHtuYW1lfSMke2lkfSDlpJblnIjpmYblnLDovrnnlYznur9gLCB0b3BvbG9neS5lZGdlSnVuY3R1cmUuYmluZCh0b3BvbG9neSksIFtwZywgaWQsICdvdXRlciddKTtcbiAgfSk7XG5cbiAgYXdhaXQgJC5VdGlscy5jYWxsKGDlpJblm70g5YaF5ZyI6ZmG5Zyw6L6555WM57q/YCwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGxpc3QgPSBhd2FpdCBMaWJUb3BvbG9neS5nZXRGb3JlaWduTGlzdChwZyk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICAgIGNvbnN0IGlkID0gK2l0ZW1bJ2lkJ107XG4gICAgICBjb25zdCBuYW1lID0gaXRlbVsnbmFtZSddO1xuICAgICAgYXdhaXQgJC5VdGlscy5jYWxsKGAke25hbWV9IyR7aWR9IOWGheWciOmZhuWcsOi+ueeVjOe6v2AsIHRvcG9sb2d5LmVkZ2VKdW5jdHVyZS5iaW5kKHRvcG9sb2d5KSwgW3BnLCBpZCwgJ2lubmVyJ10pO1xuICAgIH1cbiAgfSk7XG5cbiAgYXdhaXQgJC5VdGlscy5jYWxsKGDkuK3lm70g5YaF5ZyI6ZmG5Zyw6L6555WM57q/YCwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGlkID0gMTtcbiAgICBjb25zdCBuYW1lID0gJ+S4reWbvSc7XG4gICAgYXdhaXQgJC5VdGlscy5jYWxsKGAke25hbWV9IyR7aWR9IOWGheWciOmZhuWcsOi+ueeVjOe6v2AsIHRvcG9sb2d5LmVkZ2VKdW5jdHVyZS5iaW5kKHRvcG9sb2d5KSwgW3BnLCBpZCwgJ2lubmVyJ10pO1xuICB9KTtcblxuICBhd2FpdCBwZy5yZWxlYXNlKCk7XG59KSgpOyJdfQ==