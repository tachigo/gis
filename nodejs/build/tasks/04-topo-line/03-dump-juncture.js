'use strict';

var _modules = _interopRequireDefault(require("./../../modules"));

var _LibTopoLine = _interopRequireDefault(require("./LibTopoLine"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  const pg = await _modules.default.PgSQL.client('localhost');
  const topologyName = 'line_topo';
  const dumpTable = 'line_dump';
  const topoTable = 'line_topo';
  const schema = 'topo';
  const topology = new _LibTopoLine.default(topologyName, dumpTable, topoTable, schema);
  await _modules.default.Utils.call(`外国 外圈陆地边界线`, async () => {
    const list = await _LibTopoLine.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, topology.dumpJunctureAvgVertices.bind(topology), [pg, id, 'outer']);
    }
  });
  await _modules.default.Utils.call(`中国 外圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, topology.dumpJunctureAvgVertices.bind(topology), [pg, id, 'outer']);
  });
  await _modules.default.Utils.call(`外国 内圈陆地边界线`, async () => {
    const list = await _LibTopoLine.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, topology.dumpJunctureAvgVertices.bind(topology), [pg, id, 'inner']);
    }
  });
  await _modules.default.Utils.call(`中国 内圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, topology.dumpJunctureAvgVertices.bind(topology), [pg, id, 'inner']);
  });
  await pg.release();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy8wNC10b3BvLWxpbmUvMDMtZHVtcC1qdW5jdHVyZS5qcyJdLCJuYW1lcyI6WyJwZyIsIiQiLCJQZ1NRTCIsImNsaWVudCIsInRvcG9sb2d5TmFtZSIsImR1bXBUYWJsZSIsInRvcG9UYWJsZSIsInNjaGVtYSIsInRvcG9sb2d5IiwiTGliVG9wb0xpbmUiLCJVdGlscyIsImNhbGwiLCJsaXN0IiwiZ2V0Rm9yZWlnbkxpc3QiLCJpdGVtIiwiaWQiLCJuYW1lIiwiZHVtcEp1bmN0dXJlQXZnVmVydGljZXMiLCJiaW5kIiwicmVsZWFzZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0E7O0FBRUE7Ozs7QUFHQSxDQUFDLFlBQVk7QUFDWCxRQUFNQSxFQUFFLEdBQUcsTUFBTUMsaUJBQUVDLEtBQUYsQ0FBUUMsTUFBUixDQUFlLFdBQWYsQ0FBakI7QUFDQSxRQUFNQyxZQUFZLEdBQUcsV0FBckI7QUFDQSxRQUFNQyxTQUFTLEdBQUcsV0FBbEI7QUFDQSxRQUFNQyxTQUFTLEdBQUcsV0FBbEI7QUFDQSxRQUFNQyxNQUFNLEdBQUcsTUFBZjtBQUNBLFFBQU1DLFFBQVEsR0FBRyxJQUFJQyxvQkFBSixDQUFnQkwsWUFBaEIsRUFBOEJDLFNBQTlCLEVBQXlDQyxTQUF6QyxFQUFvREMsTUFBcEQsQ0FBakI7QUFHQSxRQUFNTixpQkFBRVMsS0FBRixDQUFRQyxJQUFSLENBQWMsWUFBZCxFQUEyQixZQUFZO0FBQzNDLFVBQU1DLElBQUksR0FBRyxNQUFNSCxxQkFBWUksY0FBWixDQUEyQmIsRUFBM0IsQ0FBbkI7O0FBQ0EsZUFBVyxNQUFNYyxJQUFqQixJQUF5QkYsSUFBekIsRUFBK0I7QUFDN0IsWUFBTUcsRUFBRSxHQUFHLENBQUNELElBQUksQ0FBQyxJQUFELENBQWhCO0FBQ0EsWUFBTUUsSUFBSSxHQUFHRixJQUFJLENBQUMsTUFBRCxDQUFqQjtBQUNBLFlBQU1iLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxHQUFFSyxJQUFLLElBQUdELEVBQUcsVUFBM0IsRUFBc0NQLFFBQVEsQ0FBQ1MsdUJBQVQsQ0FBaUNDLElBQWpDLENBQXNDVixRQUF0QyxDQUF0QyxFQUF1RixDQUFDUixFQUFELEVBQUtlLEVBQUwsRUFBUyxPQUFULENBQXZGLENBQU47QUFDRDtBQUNGLEdBUEssQ0FBTjtBQVNBLFFBQU1kLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUksRUFBRSxHQUFHLENBQVg7QUFDQSxVQUFNQyxJQUFJLEdBQUcsSUFBYjtBQUNBLFVBQU1mLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxHQUFFSyxJQUFLLElBQUdELEVBQUcsVUFBM0IsRUFBc0NQLFFBQVEsQ0FBQ1MsdUJBQVQsQ0FBaUNDLElBQWpDLENBQXNDVixRQUF0QyxDQUF0QyxFQUF1RixDQUFDUixFQUFELEVBQUtlLEVBQUwsRUFBUyxPQUFULENBQXZGLENBQU47QUFDRCxHQUpLLENBQU47QUFNQSxRQUFNZCxpQkFBRVMsS0FBRixDQUFRQyxJQUFSLENBQWMsWUFBZCxFQUEyQixZQUFZO0FBQzNDLFVBQU1DLElBQUksR0FBRyxNQUFNSCxxQkFBWUksY0FBWixDQUEyQmIsRUFBM0IsQ0FBbkI7O0FBQ0EsZUFBVyxNQUFNYyxJQUFqQixJQUF5QkYsSUFBekIsRUFBK0I7QUFDN0IsWUFBTUcsRUFBRSxHQUFHLENBQUNELElBQUksQ0FBQyxJQUFELENBQWhCO0FBQ0EsWUFBTUUsSUFBSSxHQUFHRixJQUFJLENBQUMsTUFBRCxDQUFqQjtBQUNBLFlBQU1iLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxHQUFFSyxJQUFLLElBQUdELEVBQUcsVUFBM0IsRUFBc0NQLFFBQVEsQ0FBQ1MsdUJBQVQsQ0FBaUNDLElBQWpDLENBQXNDVixRQUF0QyxDQUF0QyxFQUF1RixDQUFDUixFQUFELEVBQUtlLEVBQUwsRUFBUyxPQUFULENBQXZGLENBQU47QUFDRDtBQUNGLEdBUEssQ0FBTjtBQVNBLFFBQU1kLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUksRUFBRSxHQUFHLENBQVg7QUFDQSxVQUFNQyxJQUFJLEdBQUcsSUFBYjtBQUNBLFVBQU1mLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxHQUFFSyxJQUFLLElBQUdELEVBQUcsVUFBM0IsRUFBc0NQLFFBQVEsQ0FBQ1MsdUJBQVQsQ0FBaUNDLElBQWpDLENBQXNDVixRQUF0QyxDQUF0QyxFQUF1RixDQUFDUixFQUFELEVBQUtlLEVBQUwsRUFBUyxPQUFULENBQXZGLENBQU47QUFDRCxHQUpLLENBQU47QUFNQSxRQUFNZixFQUFFLENBQUNtQixPQUFILEVBQU47QUFDRCxDQXhDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG5pbXBvcnQgJCBmcm9tICcuLy4uLy4uL21vZHVsZXMnO1xuXG5pbXBvcnQgTGliVG9wb0xpbmUgZnJvbSAnLi9MaWJUb3BvTGluZSc7XG5cblxuKGFzeW5jICgpID0+IHtcbiAgY29uc3QgcGcgPSBhd2FpdCAkLlBnU1FMLmNsaWVudCgnbG9jYWxob3N0Jyk7XG4gIGNvbnN0IHRvcG9sb2d5TmFtZSA9ICdsaW5lX3RvcG8nO1xuICBjb25zdCBkdW1wVGFibGUgPSAnbGluZV9kdW1wJztcbiAgY29uc3QgdG9wb1RhYmxlID0gJ2xpbmVfdG9wbyc7XG4gIGNvbnN0IHNjaGVtYSA9ICd0b3BvJztcbiAgY29uc3QgdG9wb2xvZ3kgPSBuZXcgTGliVG9wb0xpbmUodG9wb2xvZ3lOYW1lLCBkdW1wVGFibGUsIHRvcG9UYWJsZSwgc2NoZW1hKTtcblxuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5aSW5Zu9IOWkluWciOmZhuWcsOi+ueeVjOe6v2AsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBsaXN0ID0gYXdhaXQgTGliVG9wb0xpbmUuZ2V0Rm9yZWlnbkxpc3QocGcpO1xuICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBsaXN0KSB7XG4gICAgICBjb25zdCBpZCA9ICtpdGVtWydpZCddO1xuICAgICAgY29uc3QgbmFtZSA9IGl0ZW1bJ25hbWUnXTtcbiAgICAgIGF3YWl0ICQuVXRpbHMuY2FsbChgJHtuYW1lfSMke2lkfSDlpJblnIjpmYblnLDovrnnlYznur9gLCB0b3BvbG9neS5kdW1wSnVuY3R1cmVBdmdWZXJ0aWNlcy5iaW5kKHRvcG9sb2d5KSwgW3BnLCBpZCwgJ291dGVyJ10pO1xuICAgIH1cbiAgfSk7XG5cbiAgYXdhaXQgJC5VdGlscy5jYWxsKGDkuK3lm70g5aSW5ZyI6ZmG5Zyw6L6555WM57q/YCwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGlkID0gMTtcbiAgICBjb25zdCBuYW1lID0gJ+S4reWbvSc7XG4gICAgYXdhaXQgJC5VdGlscy5jYWxsKGAke25hbWV9IyR7aWR9IOWkluWciOmZhuWcsOi+ueeVjOe6v2AsIHRvcG9sb2d5LmR1bXBKdW5jdHVyZUF2Z1ZlcnRpY2VzLmJpbmQodG9wb2xvZ3kpLCBbcGcsIGlkLCAnb3V0ZXInXSk7XG4gIH0pO1xuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5aSW5Zu9IOWGheWciOmZhuWcsOi+ueeVjOe6v2AsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBsaXN0ID0gYXdhaXQgTGliVG9wb0xpbmUuZ2V0Rm9yZWlnbkxpc3QocGcpO1xuICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBsaXN0KSB7XG4gICAgICBjb25zdCBpZCA9ICtpdGVtWydpZCddO1xuICAgICAgY29uc3QgbmFtZSA9IGl0ZW1bJ25hbWUnXTtcbiAgICAgIGF3YWl0ICQuVXRpbHMuY2FsbChgJHtuYW1lfSMke2lkfSDlhoXlnIjpmYblnLDovrnnlYznur9gLCB0b3BvbG9neS5kdW1wSnVuY3R1cmVBdmdWZXJ0aWNlcy5iaW5kKHRvcG9sb2d5KSwgW3BnLCBpZCwgJ2lubmVyJ10pO1xuICAgIH1cbiAgfSk7XG5cbiAgYXdhaXQgJC5VdGlscy5jYWxsKGDkuK3lm70g5YaF5ZyI6ZmG5Zyw6L6555WM57q/YCwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGlkID0gMTtcbiAgICBjb25zdCBuYW1lID0gJ+S4reWbvSc7XG4gICAgYXdhaXQgJC5VdGlscy5jYWxsKGAke25hbWV9IyR7aWR9IOWGheWciOmZhuWcsOi+ueeVjOe6v2AsIHRvcG9sb2d5LmR1bXBKdW5jdHVyZUF2Z1ZlcnRpY2VzLmJpbmQodG9wb2xvZ3kpLCBbcGcsIGlkLCAnaW5uZXInXSk7XG4gIH0pO1xuXG4gIGF3YWl0IHBnLnJlbGVhc2UoKTtcbn0pKCk7Il19