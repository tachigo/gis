'use strict';

var _modules = _interopRequireDefault(require("./../../modules"));

var _LibTopoLine = _interopRequireDefault(require("./LibTopoLine"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  const pg = await _modules.default.PgSQL.client('localhost');
  const topologyName = 'line_topo';
  const dumpTable = 'line_dump';
  const topoTable = 'line_topo';
  const schema = 'topo';
  const topology = new _LibTopoLine.default(topologyName, dumpTable, topoTable, schema);
  await _modules.default.Utils.call(`外国 外圈陆地边界线`, async () => {
    const list = await _LibTopoLine.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, topology.mapJuncture.bind(topology), [pg, id, 'outer']);
    }
  });
  await _modules.default.Utils.call(`中国 外圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, topology.mapJuncture.bind(topology), [pg, id, 'outer']);
  });
  await _modules.default.Utils.call(`外国 内圈陆地边界线`, async () => {
    const list = await _LibTopoLine.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, topology.mapJuncture.bind(topology), [pg, id, 'inner']);
    }
  });
  await _modules.default.Utils.call(`中国 内圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, topology.mapJuncture.bind(topology), [pg, id, 'inner']);
  });
  await pg.release();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy8wNC10b3BvLWxpbmUvMDUtbWFwLWp1bmN0dXJlLmpzIl0sIm5hbWVzIjpbInBnIiwiJCIsIlBnU1FMIiwiY2xpZW50IiwidG9wb2xvZ3lOYW1lIiwiZHVtcFRhYmxlIiwidG9wb1RhYmxlIiwic2NoZW1hIiwidG9wb2xvZ3kiLCJMaWJUb3BvTGluZSIsIlV0aWxzIiwiY2FsbCIsImxpc3QiLCJnZXRGb3JlaWduTGlzdCIsIml0ZW0iLCJpZCIsIm5hbWUiLCJtYXBKdW5jdHVyZSIsImJpbmQiLCJyZWxlYXNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFHQTs7QUFFQTs7OztBQUdBLENBQUMsWUFBWTtBQUNYLFFBQU1BLEVBQUUsR0FBRyxNQUFNQyxpQkFBRUMsS0FBRixDQUFRQyxNQUFSLENBQWUsV0FBZixDQUFqQjtBQUNBLFFBQU1DLFlBQVksR0FBRyxXQUFyQjtBQUNBLFFBQU1DLFNBQVMsR0FBRyxXQUFsQjtBQUNBLFFBQU1DLFNBQVMsR0FBRyxXQUFsQjtBQUNBLFFBQU1DLE1BQU0sR0FBRyxNQUFmO0FBQ0EsUUFBTUMsUUFBUSxHQUFHLElBQUlDLG9CQUFKLENBQWdCTCxZQUFoQixFQUE4QkMsU0FBOUIsRUFBeUNDLFNBQXpDLEVBQW9EQyxNQUFwRCxDQUFqQjtBQUVBLFFBQU1OLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUMsSUFBSSxHQUFHLE1BQU1ILHFCQUFZSSxjQUFaLENBQTJCYixFQUEzQixDQUFuQjs7QUFDQSxlQUFXLE1BQU1jLElBQWpCLElBQXlCRixJQUF6QixFQUErQjtBQUM3QixZQUFNRyxFQUFFLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDLElBQUQsQ0FBaEI7QUFDQSxZQUFNRSxJQUFJLEdBQUdGLElBQUksQ0FBQyxNQUFELENBQWpCO0FBQ0EsWUFBTWIsaUJBQUVTLEtBQUYsQ0FBUUMsSUFBUixDQUFjLEdBQUVLLElBQUssSUFBR0QsRUFBRyxVQUEzQixFQUFzQ1AsUUFBUSxDQUFDUyxXQUFULENBQXFCQyxJQUFyQixDQUEwQlYsUUFBMUIsQ0FBdEMsRUFBMkUsQ0FBQ1IsRUFBRCxFQUFLZSxFQUFMLEVBQVMsT0FBVCxDQUEzRSxDQUFOO0FBQ0Q7QUFDRixHQVBLLENBQU47QUFTQSxRQUFNZCxpQkFBRVMsS0FBRixDQUFRQyxJQUFSLENBQWMsWUFBZCxFQUEyQixZQUFZO0FBQzNDLFVBQU1JLEVBQUUsR0FBRyxDQUFYO0FBQ0EsVUFBTUMsSUFBSSxHQUFHLElBQWI7QUFDQSxVQUFNZixpQkFBRVMsS0FBRixDQUFRQyxJQUFSLENBQWMsR0FBRUssSUFBSyxJQUFHRCxFQUFHLFVBQTNCLEVBQXNDUCxRQUFRLENBQUNTLFdBQVQsQ0FBcUJDLElBQXJCLENBQTBCVixRQUExQixDQUF0QyxFQUEyRSxDQUFDUixFQUFELEVBQUtlLEVBQUwsRUFBUyxPQUFULENBQTNFLENBQU47QUFDRCxHQUpLLENBQU47QUFNQSxRQUFNZCxpQkFBRVMsS0FBRixDQUFRQyxJQUFSLENBQWMsWUFBZCxFQUEyQixZQUFZO0FBQzNDLFVBQU1DLElBQUksR0FBRyxNQUFNSCxxQkFBWUksY0FBWixDQUEyQmIsRUFBM0IsQ0FBbkI7O0FBQ0EsZUFBVyxNQUFNYyxJQUFqQixJQUF5QkYsSUFBekIsRUFBK0I7QUFDN0IsWUFBTUcsRUFBRSxHQUFHLENBQUNELElBQUksQ0FBQyxJQUFELENBQWhCO0FBQ0EsWUFBTUUsSUFBSSxHQUFHRixJQUFJLENBQUMsTUFBRCxDQUFqQjtBQUNBLFlBQU1iLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxHQUFFSyxJQUFLLElBQUdELEVBQUcsVUFBM0IsRUFBc0NQLFFBQVEsQ0FBQ1MsV0FBVCxDQUFxQkMsSUFBckIsQ0FBMEJWLFFBQTFCLENBQXRDLEVBQTJFLENBQUNSLEVBQUQsRUFBS2UsRUFBTCxFQUFTLE9BQVQsQ0FBM0UsQ0FBTjtBQUNEO0FBQ0YsR0FQSyxDQUFOO0FBU0EsUUFBTWQsaUJBQUVTLEtBQUYsQ0FBUUMsSUFBUixDQUFjLFlBQWQsRUFBMkIsWUFBWTtBQUMzQyxVQUFNSSxFQUFFLEdBQUcsQ0FBWDtBQUNBLFVBQU1DLElBQUksR0FBRyxJQUFiO0FBQ0EsVUFBTWYsaUJBQUVTLEtBQUYsQ0FBUUMsSUFBUixDQUFjLEdBQUVLLElBQUssSUFBR0QsRUFBRyxVQUEzQixFQUFzQ1AsUUFBUSxDQUFDUyxXQUFULENBQXFCQyxJQUFyQixDQUEwQlYsUUFBMUIsQ0FBdEMsRUFBMkUsQ0FBQ1IsRUFBRCxFQUFLZSxFQUFMLEVBQVMsT0FBVCxDQUEzRSxDQUFOO0FBQ0QsR0FKSyxDQUFOO0FBTUEsUUFBTWYsRUFBRSxDQUFDbUIsT0FBSCxFQUFOO0FBQ0QsQ0F2Q0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxuaW1wb3J0ICQgZnJvbSAnLi8uLi8uLi9tb2R1bGVzJztcblxuaW1wb3J0IExpYlRvcG9MaW5lIGZyb20gJy4vTGliVG9wb0xpbmUnO1xuXG5cbihhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHBnID0gYXdhaXQgJC5QZ1NRTC5jbGllbnQoJ2xvY2FsaG9zdCcpO1xuICBjb25zdCB0b3BvbG9neU5hbWUgPSAnbGluZV90b3BvJztcbiAgY29uc3QgZHVtcFRhYmxlID0gJ2xpbmVfZHVtcCc7XG4gIGNvbnN0IHRvcG9UYWJsZSA9ICdsaW5lX3RvcG8nO1xuICBjb25zdCBzY2hlbWEgPSAndG9wbyc7XG4gIGNvbnN0IHRvcG9sb2d5ID0gbmV3IExpYlRvcG9MaW5lKHRvcG9sb2d5TmFtZSwgZHVtcFRhYmxlLCB0b3BvVGFibGUsIHNjaGVtYSk7XG5cbiAgYXdhaXQgJC5VdGlscy5jYWxsKGDlpJblm70g5aSW5ZyI6ZmG5Zyw6L6555WM57q/YCwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGxpc3QgPSBhd2FpdCBMaWJUb3BvTGluZS5nZXRGb3JlaWduTGlzdChwZyk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICAgIGNvbnN0IGlkID0gK2l0ZW1bJ2lkJ107XG4gICAgICBjb25zdCBuYW1lID0gaXRlbVsnbmFtZSddO1xuICAgICAgYXdhaXQgJC5VdGlscy5jYWxsKGAke25hbWV9IyR7aWR9IOWkluWciOmZhuWcsOi+ueeVjOe6v2AsIHRvcG9sb2d5Lm1hcEp1bmN0dXJlLmJpbmQodG9wb2xvZ3kpLCBbcGcsIGlkLCAnb3V0ZXInXSk7XG4gICAgfVxuICB9KTtcblxuICBhd2FpdCAkLlV0aWxzLmNhbGwoYOS4reWbvSDlpJblnIjpmYblnLDovrnnlYznur9gLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaWQgPSAxO1xuICAgIGNvbnN0IG5hbWUgPSAn5Lit5Zu9JztcbiAgICBhd2FpdCAkLlV0aWxzLmNhbGwoYCR7bmFtZX0jJHtpZH0g5aSW5ZyI6ZmG5Zyw6L6555WM57q/YCwgdG9wb2xvZ3kubWFwSnVuY3R1cmUuYmluZCh0b3BvbG9neSksIFtwZywgaWQsICdvdXRlciddKTtcbiAgfSk7XG5cbiAgYXdhaXQgJC5VdGlscy5jYWxsKGDlpJblm70g5YaF5ZyI6ZmG5Zyw6L6555WM57q/YCwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGxpc3QgPSBhd2FpdCBMaWJUb3BvTGluZS5nZXRGb3JlaWduTGlzdChwZyk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICAgIGNvbnN0IGlkID0gK2l0ZW1bJ2lkJ107XG4gICAgICBjb25zdCBuYW1lID0gaXRlbVsnbmFtZSddO1xuICAgICAgYXdhaXQgJC5VdGlscy5jYWxsKGAke25hbWV9IyR7aWR9IOWGheWciOmZhuWcsOi+ueeVjOe6v2AsIHRvcG9sb2d5Lm1hcEp1bmN0dXJlLmJpbmQodG9wb2xvZ3kpLCBbcGcsIGlkLCAnaW5uZXInXSk7XG4gICAgfVxuICB9KTtcblxuICBhd2FpdCAkLlV0aWxzLmNhbGwoYOS4reWbvSDlhoXlnIjpmYblnLDovrnnlYznur9gLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaWQgPSAxO1xuICAgIGNvbnN0IG5hbWUgPSAn5Lit5Zu9JztcbiAgICBhd2FpdCAkLlV0aWxzLmNhbGwoYCR7bmFtZX0jJHtpZH0g5YaF5ZyI6ZmG5Zyw6L6555WM57q/YCwgdG9wb2xvZ3kubWFwSnVuY3R1cmUuYmluZCh0b3BvbG9neSksIFtwZywgaWQsICdpbm5lciddKTtcbiAgfSk7XG5cbiAgYXdhaXQgcGcucmVsZWFzZSgpO1xufSkoKTsiXX0=