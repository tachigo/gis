'use strict';

var _modules = _interopRequireDefault(require("./../../modules"));

var _LibTopology = _interopRequireDefault(require("./LibTopology"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  const pg = await _modules.default.PgSQL.pool('localhost');
  await _modules.default.Utils.call(`外国 外圈陆地边界线`, async () => {
    const list = await _LibTopology.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, _LibTopology.default.dumpJunctureAvgVertices.bind(_LibTopology.default), [pg, id, 'outer']);
    }
  });
  await _modules.default.Utils.call(`中国 外圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, _LibTopology.default.dumpJunctureAvgVertices.bind(_LibTopology.default), [pg, id, 'outer']);
  });
  await _modules.default.Utils.call(`外国 内圈陆地边界线`, async () => {
    const list = await _LibTopology.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, _LibTopology.default.dumpJunctureAvgVertices.bind(_LibTopology.default), [pg, id, 'inner']);
    }
  });
  await _modules.default.Utils.call(`中国 内圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, _LibTopology.default.dumpJunctureAvgVertices.bind(_LibTopology.default), [pg, id, 'inner']);
  });
  await pg.release();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy8wNC10b3BvLWxpbmUvMDEtZHVtcC1qdW5jdHVyZS5qcyJdLCJuYW1lcyI6WyJwZyIsIiQiLCJQZ1NRTCIsInBvb2wiLCJVdGlscyIsImNhbGwiLCJsaXN0IiwiTGliVG9wb2xvZ3kiLCJnZXRGb3JlaWduTGlzdCIsIml0ZW0iLCJpZCIsIm5hbWUiLCJkdW1wSnVuY3R1cmVBdmdWZXJ0aWNlcyIsImJpbmQiLCJyZWxlYXNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFHQTs7QUFFQTs7OztBQUdBLENBQUMsWUFBWTtBQUNYLFFBQU1BLEVBQUUsR0FBRyxNQUFNQyxpQkFBRUMsS0FBRixDQUFRQyxJQUFSLENBQWEsV0FBYixDQUFqQjtBQUVBLFFBQU1GLGlCQUFFRyxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUMsSUFBSSxHQUFHLE1BQU1DLHFCQUFZQyxjQUFaLENBQTJCUixFQUEzQixDQUFuQjs7QUFDQSxlQUFXLE1BQU1TLElBQWpCLElBQXlCSCxJQUF6QixFQUErQjtBQUM3QixZQUFNSSxFQUFFLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDLElBQUQsQ0FBaEI7QUFDQSxZQUFNRSxJQUFJLEdBQUdGLElBQUksQ0FBQyxNQUFELENBQWpCO0FBQ0EsWUFBTVIsaUJBQUVHLEtBQUYsQ0FBUUMsSUFBUixDQUFjLEdBQUVNLElBQUssSUFBR0QsRUFBRyxVQUEzQixFQUFzQ0gscUJBQVlLLHVCQUFaLENBQW9DQyxJQUFwQyxDQUF5Q04sb0JBQXpDLENBQXRDLEVBQTZGLENBQUNQLEVBQUQsRUFBS1UsRUFBTCxFQUFTLE9BQVQsQ0FBN0YsQ0FBTjtBQUNEO0FBQ0YsR0FQSyxDQUFOO0FBU0EsUUFBTVQsaUJBQUVHLEtBQUYsQ0FBUUMsSUFBUixDQUFjLFlBQWQsRUFBMkIsWUFBWTtBQUMzQyxVQUFNSyxFQUFFLEdBQUcsQ0FBWDtBQUNBLFVBQU1DLElBQUksR0FBRyxJQUFiO0FBQ0EsVUFBTVYsaUJBQUVHLEtBQUYsQ0FBUUMsSUFBUixDQUFjLEdBQUVNLElBQUssSUFBR0QsRUFBRyxVQUEzQixFQUFzQ0gscUJBQVlLLHVCQUFaLENBQW9DQyxJQUFwQyxDQUF5Q04sb0JBQXpDLENBQXRDLEVBQTZGLENBQUNQLEVBQUQsRUFBS1UsRUFBTCxFQUFTLE9BQVQsQ0FBN0YsQ0FBTjtBQUNELEdBSkssQ0FBTjtBQU1BLFFBQU1ULGlCQUFFRyxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUMsSUFBSSxHQUFHLE1BQU1DLHFCQUFZQyxjQUFaLENBQTJCUixFQUEzQixDQUFuQjs7QUFDQSxlQUFXLE1BQU1TLElBQWpCLElBQXlCSCxJQUF6QixFQUErQjtBQUM3QixZQUFNSSxFQUFFLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDLElBQUQsQ0FBaEI7QUFDQSxZQUFNRSxJQUFJLEdBQUdGLElBQUksQ0FBQyxNQUFELENBQWpCO0FBQ0EsWUFBTVIsaUJBQUVHLEtBQUYsQ0FBUUMsSUFBUixDQUFjLEdBQUVNLElBQUssSUFBR0QsRUFBRyxVQUEzQixFQUFzQ0gscUJBQVlLLHVCQUFaLENBQW9DQyxJQUFwQyxDQUF5Q04sb0JBQXpDLENBQXRDLEVBQTZGLENBQUNQLEVBQUQsRUFBS1UsRUFBTCxFQUFTLE9BQVQsQ0FBN0YsQ0FBTjtBQUNEO0FBQ0YsR0FQSyxDQUFOO0FBU0EsUUFBTVQsaUJBQUVHLEtBQUYsQ0FBUUMsSUFBUixDQUFjLFlBQWQsRUFBMkIsWUFBWTtBQUMzQyxVQUFNSyxFQUFFLEdBQUcsQ0FBWDtBQUNBLFVBQU1DLElBQUksR0FBRyxJQUFiO0FBQ0EsVUFBTVYsaUJBQUVHLEtBQUYsQ0FBUUMsSUFBUixDQUFjLEdBQUVNLElBQUssSUFBR0QsRUFBRyxVQUEzQixFQUFzQ0gscUJBQVlLLHVCQUFaLENBQW9DQyxJQUFwQyxDQUF5Q04sb0JBQXpDLENBQXRDLEVBQTZGLENBQUNQLEVBQUQsRUFBS1UsRUFBTCxFQUFTLE9BQVQsQ0FBN0YsQ0FBTjtBQUNELEdBSkssQ0FBTjtBQU1BLFFBQU1WLEVBQUUsQ0FBQ2MsT0FBSCxFQUFOO0FBQ0QsQ0FsQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxuaW1wb3J0ICQgZnJvbSAnLi8uLi8uLi9tb2R1bGVzJztcblxuaW1wb3J0IExpYlRvcG9sb2d5IGZyb20gJy4vTGliVG9wb2xvZ3knO1xuXG5cbihhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHBnID0gYXdhaXQgJC5QZ1NRTC5wb29sKCdsb2NhbGhvc3QnKTtcblxuICBhd2FpdCAkLlV0aWxzLmNhbGwoYOWkluWbvSDlpJblnIjpmYblnLDovrnnlYznur9gLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbGlzdCA9IGF3YWl0IExpYlRvcG9sb2d5LmdldEZvcmVpZ25MaXN0KHBnKTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgICAgY29uc3QgaWQgPSAraXRlbVsnaWQnXTtcbiAgICAgIGNvbnN0IG5hbWUgPSBpdGVtWyduYW1lJ107XG4gICAgICBhd2FpdCAkLlV0aWxzLmNhbGwoYCR7bmFtZX0jJHtpZH0g5aSW5ZyI6ZmG5Zyw6L6555WM57q/YCwgTGliVG9wb2xvZ3kuZHVtcEp1bmN0dXJlQXZnVmVydGljZXMuYmluZChMaWJUb3BvbG9neSksIFtwZywgaWQsICdvdXRlciddKTtcbiAgICB9XG4gIH0pO1xuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5Lit5Zu9IOWkluWciOmZhuWcsOi+ueeVjOe6v2AsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpZCA9IDE7XG4gICAgY29uc3QgbmFtZSA9ICfkuK3lm70nO1xuICAgIGF3YWl0ICQuVXRpbHMuY2FsbChgJHtuYW1lfSMke2lkfSDlpJblnIjpmYblnLDovrnnlYznur9gLCBMaWJUb3BvbG9neS5kdW1wSnVuY3R1cmVBdmdWZXJ0aWNlcy5iaW5kKExpYlRvcG9sb2d5KSwgW3BnLCBpZCwgJ291dGVyJ10pO1xuICB9KTtcblxuICBhd2FpdCAkLlV0aWxzLmNhbGwoYOWkluWbvSDlhoXlnIjpmYblnLDovrnnlYznur9gLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbGlzdCA9IGF3YWl0IExpYlRvcG9sb2d5LmdldEZvcmVpZ25MaXN0KHBnKTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgICAgY29uc3QgaWQgPSAraXRlbVsnaWQnXTtcbiAgICAgIGNvbnN0IG5hbWUgPSBpdGVtWyduYW1lJ107XG4gICAgICBhd2FpdCAkLlV0aWxzLmNhbGwoYCR7bmFtZX0jJHtpZH0g5YaF5ZyI6ZmG5Zyw6L6555WM57q/YCwgTGliVG9wb2xvZ3kuZHVtcEp1bmN0dXJlQXZnVmVydGljZXMuYmluZChMaWJUb3BvbG9neSksIFtwZywgaWQsICdpbm5lciddKTtcbiAgICB9XG4gIH0pO1xuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5Lit5Zu9IOWGheWciOmZhuWcsOi+ueeVjOe6v2AsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpZCA9IDE7XG4gICAgY29uc3QgbmFtZSA9ICfkuK3lm70nO1xuICAgIGF3YWl0ICQuVXRpbHMuY2FsbChgJHtuYW1lfSMke2lkfSDlhoXlnIjpmYblnLDovrnnlYznur9gLCBMaWJUb3BvbG9neS5kdW1wSnVuY3R1cmVBdmdWZXJ0aWNlcy5iaW5kKExpYlRvcG9sb2d5KSwgW3BnLCBpZCwgJ2lubmVyJ10pO1xuICB9KTtcblxuICBhd2FpdCBwZy5yZWxlYXNlKCk7XG59KSgpOyJdfQ==