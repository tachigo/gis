'use strict';

var _modules = _interopRequireDefault(require("./../../modules"));

var _terraformerWktParser = _interopRequireDefault(require("terraformer-wkt-parser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  const pg = await _modules.default.PgSQL.client('localhost');
  const shpFilename = `${_modules.default.Utils.dataDir}/shapefile/osm-data/osm-country/country.shp`;
  const dbfFilename = `${_modules.default.Utils.dataDir}/shapefile/osm-data/osm-country/country.dbf`;
  const pgTableName = 'osm.relation_aggregate';

  const lineResolve = async result => {
    const properties = result.value.properties;

    const geometry = _terraformerWktParser.default.convert(result.value.geometry);

    const startTime = new Date().getTime(); // 计时

    const sql = `insert into ${pgTableName} (id, parent_id, level, iso, osm_ids, zh_name, en_name, geom)
    values (
      $1::bigint, $2::bigint, $3::integer, $4::varchar, $5::bigint[], 
      $6::varchar, $7::varchar, ST_Multi(ST_GeomFromText($8, 4326))::geometry
    )
    on conflict (id) do update
    set parent_id = excluded.parent_id, level = excluded.level, iso = excluded.iso, osm_ids =excluded.osm_ids, 
    zh_name = excluded.zh_name, en_name = excluded.en_name, geom = excluded.geom`;
    const params = [properties['id'], properties['parent_id'], properties['level'], properties['iso'], properties['osm_ids'], properties['zh_name'], properties['en_name'], geometry];
    await pg.query(sql, params).catch(e => {
      console.log(sql);
      throw e;
    });
    const endTime = new Date().getTime();
    const costTime = endTime - startTime;
    await _modules.default.Utils.log(`${pgTableName}#${properties['id']} cost ... ${costTime / 1000} s`);
  };

  await _modules.default.ShapeFile.readLine(shpFilename, dbfFilename, lineResolve);
  await pg.release();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy8wMC1vc20vMDctaW1wb3J0LmpzIl0sIm5hbWVzIjpbInBnIiwiJCIsIlBnU1FMIiwiY2xpZW50Iiwic2hwRmlsZW5hbWUiLCJVdGlscyIsImRhdGFEaXIiLCJkYmZGaWxlbmFtZSIsInBnVGFibGVOYW1lIiwibGluZVJlc29sdmUiLCJyZXN1bHQiLCJwcm9wZXJ0aWVzIiwidmFsdWUiLCJnZW9tZXRyeSIsIldLVCIsImNvbnZlcnQiLCJzdGFydFRpbWUiLCJEYXRlIiwiZ2V0VGltZSIsInNxbCIsInBhcmFtcyIsInF1ZXJ5IiwiY2F0Y2giLCJlIiwiY29uc29sZSIsImxvZyIsImVuZFRpbWUiLCJjb3N0VGltZSIsIlNoYXBlRmlsZSIsInJlYWRMaW5lIiwicmVsZWFzZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBQ0E7Ozs7QUFFQSxDQUFDLFlBQVk7QUFDWCxRQUFNQSxFQUFFLEdBQUcsTUFBTUMsaUJBQUVDLEtBQUYsQ0FBUUMsTUFBUixDQUFlLFdBQWYsQ0FBakI7QUFDQSxRQUFNQyxXQUFXLEdBQUksR0FBRUgsaUJBQUVJLEtBQUYsQ0FBUUMsT0FBUSw2Q0FBdkM7QUFDQSxRQUFNQyxXQUFXLEdBQUksR0FBRU4saUJBQUVJLEtBQUYsQ0FBUUMsT0FBUSw2Q0FBdkM7QUFDQSxRQUFNRSxXQUFXLEdBQUcsd0JBQXBCOztBQUNBLFFBQU1DLFdBQVcsR0FBRyxNQUFPQyxNQUFQLElBQWtCO0FBQ3BDLFVBQU1DLFVBQVUsR0FBR0QsTUFBTSxDQUFDRSxLQUFQLENBQWFELFVBQWhDOztBQUNBLFVBQU1FLFFBQVEsR0FBR0MsOEJBQUlDLE9BQUosQ0FBWUwsTUFBTSxDQUFDRSxLQUFQLENBQWFDLFFBQXpCLENBQWpCOztBQUNBLFVBQU1HLFNBQVMsR0FBSSxJQUFJQyxJQUFKLEVBQUQsQ0FBYUMsT0FBYixFQUFsQixDQUhvQyxDQUdNOztBQUMxQyxVQUFNQyxHQUFHLEdBQUksZUFBY1gsV0FBWTs7Ozs7OztpRkFBdkM7QUFRQSxVQUFNWSxNQUFNLEdBQUcsQ0FDYlQsVUFBVSxDQUFDLElBQUQsQ0FERyxFQUNLQSxVQUFVLENBQUMsV0FBRCxDQURmLEVBQzhCQSxVQUFVLENBQUMsT0FBRCxDQUR4QyxFQUNtREEsVUFBVSxDQUFDLEtBQUQsQ0FEN0QsRUFDc0VBLFVBQVUsQ0FBQyxTQUFELENBRGhGLEVBRWJBLFVBQVUsQ0FBQyxTQUFELENBRkcsRUFFVUEsVUFBVSxDQUFDLFNBQUQsQ0FGcEIsRUFFaUNFLFFBRmpDLENBQWY7QUFHQSxVQUFNYixFQUFFLENBQUNxQixLQUFILENBQVNGLEdBQVQsRUFBY0MsTUFBZCxFQUNIRSxLQURHLENBQ0dDLENBQUMsSUFBSTtBQUNWQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWU4sR0FBWjtBQUNBLFlBQU1JLENBQU47QUFDRCxLQUpHLENBQU47QUFNQSxVQUFNRyxPQUFPLEdBQUksSUFBSVQsSUFBSixFQUFELENBQWFDLE9BQWIsRUFBaEI7QUFDQSxVQUFNUyxRQUFRLEdBQUdELE9BQU8sR0FBR1YsU0FBM0I7QUFDQSxVQUFNZixpQkFBRUksS0FBRixDQUFRb0IsR0FBUixDQUFhLEdBQUVqQixXQUFZLElBQUdHLFVBQVUsQ0FBQyxJQUFELENBQU8sYUFBWWdCLFFBQVEsR0FBRyxJQUFLLElBQTNFLENBQU47QUFDRCxHQXhCRDs7QUF5QkEsUUFBTTFCLGlCQUFFMkIsU0FBRixDQUFZQyxRQUFaLENBQXFCekIsV0FBckIsRUFBa0NHLFdBQWxDLEVBQStDRSxXQUEvQyxDQUFOO0FBRUEsUUFBTVQsRUFBRSxDQUFDOEIsT0FBSCxFQUFOO0FBQ0QsQ0FqQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAkIGZyb20gJy4vLi4vLi4vbW9kdWxlcyc7XG5pbXBvcnQgV0tUIGZyb20gXCJ0ZXJyYWZvcm1lci13a3QtcGFyc2VyXCI7XG5cbihhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHBnID0gYXdhaXQgJC5QZ1NRTC5jbGllbnQoJ2xvY2FsaG9zdCcpO1xuICBjb25zdCBzaHBGaWxlbmFtZSA9IGAkeyQuVXRpbHMuZGF0YURpcn0vc2hhcGVmaWxlL29zbS1kYXRhL29zbS1jb3VudHJ5L2NvdW50cnkuc2hwYDtcbiAgY29uc3QgZGJmRmlsZW5hbWUgPSBgJHskLlV0aWxzLmRhdGFEaXJ9L3NoYXBlZmlsZS9vc20tZGF0YS9vc20tY291bnRyeS9jb3VudHJ5LmRiZmA7XG4gIGNvbnN0IHBnVGFibGVOYW1lID0gJ29zbS5yZWxhdGlvbl9hZ2dyZWdhdGUnO1xuICBjb25zdCBsaW5lUmVzb2x2ZSA9IGFzeW5jIChyZXN1bHQpID0+IHtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gcmVzdWx0LnZhbHVlLnByb3BlcnRpZXM7XG4gICAgY29uc3QgZ2VvbWV0cnkgPSBXS1QuY29udmVydChyZXN1bHQudmFsdWUuZ2VvbWV0cnkpO1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7IC8vIOiuoeaXtlxuICAgIGNvbnN0IHNxbCA9IGBpbnNlcnQgaW50byAke3BnVGFibGVOYW1lfSAoaWQsIHBhcmVudF9pZCwgbGV2ZWwsIGlzbywgb3NtX2lkcywgemhfbmFtZSwgZW5fbmFtZSwgZ2VvbSlcbiAgICB2YWx1ZXMgKFxuICAgICAgJDE6OmJpZ2ludCwgJDI6OmJpZ2ludCwgJDM6OmludGVnZXIsICQ0Ojp2YXJjaGFyLCAkNTo6YmlnaW50W10sIFxuICAgICAgJDY6OnZhcmNoYXIsICQ3Ojp2YXJjaGFyLCBTVF9NdWx0aShTVF9HZW9tRnJvbVRleHQoJDgsIDQzMjYpKTo6Z2VvbWV0cnlcbiAgICApXG4gICAgb24gY29uZmxpY3QgKGlkKSBkbyB1cGRhdGVcbiAgICBzZXQgcGFyZW50X2lkID0gZXhjbHVkZWQucGFyZW50X2lkLCBsZXZlbCA9IGV4Y2x1ZGVkLmxldmVsLCBpc28gPSBleGNsdWRlZC5pc28sIG9zbV9pZHMgPWV4Y2x1ZGVkLm9zbV9pZHMsIFxuICAgIHpoX25hbWUgPSBleGNsdWRlZC56aF9uYW1lLCBlbl9uYW1lID0gZXhjbHVkZWQuZW5fbmFtZSwgZ2VvbSA9IGV4Y2x1ZGVkLmdlb21gO1xuICAgIGNvbnN0IHBhcmFtcyA9IFtcbiAgICAgIHByb3BlcnRpZXNbJ2lkJ10sIHByb3BlcnRpZXNbJ3BhcmVudF9pZCddLCBwcm9wZXJ0aWVzWydsZXZlbCddLCBwcm9wZXJ0aWVzWydpc28nXSwgcHJvcGVydGllc1snb3NtX2lkcyddLFxuICAgICAgcHJvcGVydGllc1snemhfbmFtZSddLCBwcm9wZXJ0aWVzWydlbl9uYW1lJ10sIGdlb21ldHJ5XTtcbiAgICBhd2FpdCBwZy5xdWVyeShzcWwsIHBhcmFtcylcbiAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coc3FsKTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pXG4gICAgO1xuICAgIGNvbnN0IGVuZFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IGNvc3RUaW1lID0gZW5kVGltZSAtIHN0YXJ0VGltZTtcbiAgICBhd2FpdCAkLlV0aWxzLmxvZyhgJHtwZ1RhYmxlTmFtZX0jJHtwcm9wZXJ0aWVzWydpZCddfSBjb3N0IC4uLiAke2Nvc3RUaW1lIC8gMTAwMH0gc2ApO1xuICB9O1xuICBhd2FpdCAkLlNoYXBlRmlsZS5yZWFkTGluZShzaHBGaWxlbmFtZSwgZGJmRmlsZW5hbWUsIGxpbmVSZXNvbHZlKTtcblxuICBhd2FpdCBwZy5yZWxlYXNlKCk7XG59KSgpOyJdfQ==