'use strict';

var _modules = _interopRequireDefault(require("./../../modules"));

var _LibTopology = _interopRequireDefault(require("./LibTopology"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async () => {
  const pg = await _modules.default.PgSQL.client('localhost');
  const lineDumpSchema = 'topo';
  const lineDumpTable = 'line_dump';
  const lineTopoSchema = 'topo';
  const lineTopoTable = 'line_topo';
  const topology = new _LibTopology.default(lineDumpSchema, lineDumpTable, lineTopoSchema, lineTopoTable);
  await _modules.default.Utils.call(`外国 外圈陆地边界线`, async () => {
    const list = await _LibTopology.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, topology.dumpJuncture.bind(topology), [pg, id, 'outer']);
    }
  });
  await _modules.default.Utils.call(`中国 外圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 外圈陆地边界线`, topology.dumpJuncture.bind(topology), [pg, id, 'outer']);
  });
  await _modules.default.Utils.call(`外国 内圈陆地边界线`, async () => {
    const list = await _LibTopology.default.getForeignList(pg);

    for await (const item of list) {
      const id = +item['id'];
      const name = item['name'];
      await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, topology.dumpJuncture.bind(topology), [pg, id, 'inner']);
    }
  });
  await _modules.default.Utils.call(`中国 内圈陆地边界线`, async () => {
    const id = 1;
    const name = '中国';
    await _modules.default.Utils.call(`${name}#${id} 内圈陆地边界线`, topology.dumpJuncture.bind(topology), [pg, id, 'inner']);
  });
  await pg.release();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YXNrcy8wNC10b3BvbG9neS8wMi1kdW1wLWp1bmN0dXJlLmpzIl0sIm5hbWVzIjpbInBnIiwiJCIsIlBnU1FMIiwiY2xpZW50IiwibGluZUR1bXBTY2hlbWEiLCJsaW5lRHVtcFRhYmxlIiwibGluZVRvcG9TY2hlbWEiLCJsaW5lVG9wb1RhYmxlIiwidG9wb2xvZ3kiLCJMaWJUb3BvbG9neSIsIlV0aWxzIiwiY2FsbCIsImxpc3QiLCJnZXRGb3JlaWduTGlzdCIsIml0ZW0iLCJpZCIsIm5hbWUiLCJkdW1wSnVuY3R1cmUiLCJiaW5kIiwicmVsZWFzZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0E7O0FBRUE7Ozs7QUFHQSxDQUFDLFlBQVk7QUFDWCxRQUFNQSxFQUFFLEdBQUcsTUFBTUMsaUJBQUVDLEtBQUYsQ0FBUUMsTUFBUixDQUFlLFdBQWYsQ0FBakI7QUFFQSxRQUFNQyxjQUFjLEdBQUcsTUFBdkI7QUFDQSxRQUFNQyxhQUFhLEdBQUcsV0FBdEI7QUFDQSxRQUFNQyxjQUFjLEdBQUcsTUFBdkI7QUFDQSxRQUFNQyxhQUFhLEdBQUcsV0FBdEI7QUFDQSxRQUFNQyxRQUFRLEdBQUcsSUFBSUMsb0JBQUosQ0FBZ0JMLGNBQWhCLEVBQWdDQyxhQUFoQyxFQUErQ0MsY0FBL0MsRUFBK0RDLGFBQS9ELENBQWpCO0FBR0EsUUFBTU4saUJBQUVTLEtBQUYsQ0FBUUMsSUFBUixDQUFjLFlBQWQsRUFBMkIsWUFBWTtBQUMzQyxVQUFNQyxJQUFJLEdBQUcsTUFBTUgscUJBQVlJLGNBQVosQ0FBMkJiLEVBQTNCLENBQW5COztBQUNBLGVBQVcsTUFBTWMsSUFBakIsSUFBeUJGLElBQXpCLEVBQStCO0FBQzdCLFlBQU1HLEVBQUUsR0FBRyxDQUFDRCxJQUFJLENBQUMsSUFBRCxDQUFoQjtBQUNBLFlBQU1FLElBQUksR0FBR0YsSUFBSSxDQUFDLE1BQUQsQ0FBakI7QUFDQSxZQUFNYixpQkFBRVMsS0FBRixDQUFRQyxJQUFSLENBQWMsR0FBRUssSUFBSyxJQUFHRCxFQUFHLFVBQTNCLEVBQXNDUCxRQUFRLENBQUNTLFlBQVQsQ0FBc0JDLElBQXRCLENBQTJCVixRQUEzQixDQUF0QyxFQUE0RSxDQUFDUixFQUFELEVBQUtlLEVBQUwsRUFBUyxPQUFULENBQTVFLENBQU47QUFDRDtBQUNGLEdBUEssQ0FBTjtBQVNBLFFBQU1kLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUksRUFBRSxHQUFHLENBQVg7QUFDQSxVQUFNQyxJQUFJLEdBQUcsSUFBYjtBQUNBLFVBQU1mLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxHQUFFSyxJQUFLLElBQUdELEVBQUcsVUFBM0IsRUFBc0NQLFFBQVEsQ0FBQ1MsWUFBVCxDQUFzQkMsSUFBdEIsQ0FBMkJWLFFBQTNCLENBQXRDLEVBQTRFLENBQUNSLEVBQUQsRUFBS2UsRUFBTCxFQUFTLE9BQVQsQ0FBNUUsQ0FBTjtBQUNELEdBSkssQ0FBTjtBQU1BLFFBQU1kLGlCQUFFUyxLQUFGLENBQVFDLElBQVIsQ0FBYyxZQUFkLEVBQTJCLFlBQVk7QUFDM0MsVUFBTUMsSUFBSSxHQUFHLE1BQU1ILHFCQUFZSSxjQUFaLENBQTJCYixFQUEzQixDQUFuQjs7QUFDQSxlQUFXLE1BQU1jLElBQWpCLElBQXlCRixJQUF6QixFQUErQjtBQUM3QixZQUFNRyxFQUFFLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDLElBQUQsQ0FBaEI7QUFDQSxZQUFNRSxJQUFJLEdBQUdGLElBQUksQ0FBQyxNQUFELENBQWpCO0FBQ0EsWUFBTWIsaUJBQUVTLEtBQUYsQ0FBUUMsSUFBUixDQUFjLEdBQUVLLElBQUssSUFBR0QsRUFBRyxVQUEzQixFQUFzQ1AsUUFBUSxDQUFDUyxZQUFULENBQXNCQyxJQUF0QixDQUEyQlYsUUFBM0IsQ0FBdEMsRUFBNEUsQ0FBQ1IsRUFBRCxFQUFLZSxFQUFMLEVBQVMsT0FBVCxDQUE1RSxDQUFOO0FBQ0Q7QUFDRixHQVBLLENBQU47QUFTQSxRQUFNZCxpQkFBRVMsS0FBRixDQUFRQyxJQUFSLENBQWMsWUFBZCxFQUEyQixZQUFZO0FBQzNDLFVBQU1JLEVBQUUsR0FBRyxDQUFYO0FBQ0EsVUFBTUMsSUFBSSxHQUFHLElBQWI7QUFDQSxVQUFNZixpQkFBRVMsS0FBRixDQUFRQyxJQUFSLENBQWMsR0FBRUssSUFBSyxJQUFHRCxFQUFHLFVBQTNCLEVBQXNDUCxRQUFRLENBQUNTLFlBQVQsQ0FBc0JDLElBQXRCLENBQTJCVixRQUEzQixDQUF0QyxFQUE0RSxDQUFDUixFQUFELEVBQUtlLEVBQUwsRUFBUyxPQUFULENBQTVFLENBQU47QUFDRCxHQUpLLENBQU47QUFNQSxRQUFNZixFQUFFLENBQUNtQixPQUFILEVBQU47QUFDRCxDQXpDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG5pbXBvcnQgJCBmcm9tICcuLy4uLy4uL21vZHVsZXMnO1xuXG5pbXBvcnQgTGliVG9wb2xvZ3kgZnJvbSAnLi9MaWJUb3BvbG9neSc7XG5cblxuKGFzeW5jICgpID0+IHtcbiAgY29uc3QgcGcgPSBhd2FpdCAkLlBnU1FMLmNsaWVudCgnbG9jYWxob3N0Jyk7XG5cbiAgY29uc3QgbGluZUR1bXBTY2hlbWEgPSAndG9wbyc7XG4gIGNvbnN0IGxpbmVEdW1wVGFibGUgPSAnbGluZV9kdW1wJztcbiAgY29uc3QgbGluZVRvcG9TY2hlbWEgPSAndG9wbyc7XG4gIGNvbnN0IGxpbmVUb3BvVGFibGUgPSAnbGluZV90b3BvJztcbiAgY29uc3QgdG9wb2xvZ3kgPSBuZXcgTGliVG9wb2xvZ3kobGluZUR1bXBTY2hlbWEsIGxpbmVEdW1wVGFibGUsIGxpbmVUb3BvU2NoZW1hLCBsaW5lVG9wb1RhYmxlKTtcblxuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5aSW5Zu9IOWkluWciOmZhuWcsOi+ueeVjOe6v2AsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBsaXN0ID0gYXdhaXQgTGliVG9wb2xvZ3kuZ2V0Rm9yZWlnbkxpc3QocGcpO1xuICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBsaXN0KSB7XG4gICAgICBjb25zdCBpZCA9ICtpdGVtWydpZCddO1xuICAgICAgY29uc3QgbmFtZSA9IGl0ZW1bJ25hbWUnXTtcbiAgICAgIGF3YWl0ICQuVXRpbHMuY2FsbChgJHtuYW1lfSMke2lkfSDlpJblnIjpmYblnLDovrnnlYznur9gLCB0b3BvbG9neS5kdW1wSnVuY3R1cmUuYmluZCh0b3BvbG9neSksIFtwZywgaWQsICdvdXRlciddKTtcbiAgICB9XG4gIH0pO1xuXG4gIGF3YWl0ICQuVXRpbHMuY2FsbChg5Lit5Zu9IOWkluWciOmZhuWcsOi+ueeVjOe6v2AsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpZCA9IDE7XG4gICAgY29uc3QgbmFtZSA9ICfkuK3lm70nO1xuICAgIGF3YWl0ICQuVXRpbHMuY2FsbChgJHtuYW1lfSMke2lkfSDlpJblnIjpmYblnLDovrnnlYznur9gLCB0b3BvbG9neS5kdW1wSnVuY3R1cmUuYmluZCh0b3BvbG9neSksIFtwZywgaWQsICdvdXRlciddKTtcbiAgfSk7XG5cbiAgYXdhaXQgJC5VdGlscy5jYWxsKGDlpJblm70g5YaF5ZyI6ZmG5Zyw6L6555WM57q/YCwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGxpc3QgPSBhd2FpdCBMaWJUb3BvbG9neS5nZXRGb3JlaWduTGlzdChwZyk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICAgIGNvbnN0IGlkID0gK2l0ZW1bJ2lkJ107XG4gICAgICBjb25zdCBuYW1lID0gaXRlbVsnbmFtZSddO1xuICAgICAgYXdhaXQgJC5VdGlscy5jYWxsKGAke25hbWV9IyR7aWR9IOWGheWciOmZhuWcsOi+ueeVjOe6v2AsIHRvcG9sb2d5LmR1bXBKdW5jdHVyZS5iaW5kKHRvcG9sb2d5KSwgW3BnLCBpZCwgJ2lubmVyJ10pO1xuICAgIH1cbiAgfSk7XG5cbiAgYXdhaXQgJC5VdGlscy5jYWxsKGDkuK3lm70g5YaF5ZyI6ZmG5Zyw6L6555WM57q/YCwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGlkID0gMTtcbiAgICBjb25zdCBuYW1lID0gJ+S4reWbvSc7XG4gICAgYXdhaXQgJC5VdGlscy5jYWxsKGAke25hbWV9IyR7aWR9IOWGheWciOmZhuWcsOi+ueeVjOe6v2AsIHRvcG9sb2d5LmR1bXBKdW5jdHVyZS5iaW5kKHRvcG9sb2d5KSwgW3BnLCBpZCwgJ2lubmVyJ10pO1xuICB9KTtcblxuICBhd2FpdCBwZy5yZWxlYXNlKCk7XG59KSgpOyJdfQ==